; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\xlink_demo.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\xlink_demo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I..\sdk\1.50\include -I..\xlink -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\xlink_demo.crf ..\src\xlink_Demo.c]
                          THUMB

                          AREA ||i.GetAllDataPiont||, CODE, READONLY, ALIGN=2

                  GetAllDataPiont PROC
;;;235    }
;;;236    static void GetAllDataPiont(unsigned char *data, int *datalen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;237    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;238    	//XLINK_DATAPOINT_MAX_BYTES
;;;239    	int i = 0;
000008  2400              MOVS     r4,#0
;;;240    	
;;;241    	data[i++] = 0;
00000a  2200              MOVS     r2,#0
00000c  4620              MOV      r0,r4
00000e  1c64              ADDS     r4,r4,#1
000010  542a              STRB     r2,[r5,r0]
;;;242    	data[i++] = DP_BYTE;
000012  4620              MOV      r0,r4
000014  1c64              ADDS     r4,r4,#1
000016  542a              STRB     r2,[r5,r0]
;;;243    	data[i++] = 1;
000018  2201              MOVS     r2,#1
00001a  4620              MOV      r0,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  542a              STRB     r2,[r5,r0]
;;;244    	data[i++] = mydp.temperature;
000020  483a              LDR      r0,|L1.268|
000022  7802              LDRB     r2,[r0,#0]  ; mydp
000024  4620              MOV      r0,r4
000026  1c64              ADDS     r4,r4,#1
000028  542a              STRB     r2,[r5,r0]
;;;245    	
;;;246    	data[i++] = 1;
00002a  2201              MOVS     r2,#1
00002c  4620              MOV      r0,r4
00002e  1c64              ADDS     r4,r4,#1
000030  542a              STRB     r2,[r5,r0]
;;;247    	data[i++] = DP_BYTE;
000032  2200              MOVS     r2,#0
000034  4620              MOV      r0,r4
000036  1c64              ADDS     r4,r4,#1
000038  542a              STRB     r2,[r5,r0]
;;;248    	data[i++] = 1;
00003a  2201              MOVS     r2,#1
00003c  4620              MOV      r0,r4
00003e  1c64              ADDS     r4,r4,#1
000040  542a              STRB     r2,[r5,r0]
;;;249    	data[i++] = mydp.pressure;
000042  4832              LDR      r0,|L1.268|
000044  7842              LDRB     r2,[r0,#1]  ; mydp
000046  4620              MOV      r0,r4
000048  1c64              ADDS     r4,r4,#1
00004a  542a              STRB     r2,[r5,r0]
;;;250    	
;;;251    	data[i++] = 2;
00004c  2202              MOVS     r2,#2
00004e  4620              MOV      r0,r4
000050  1c64              ADDS     r4,r4,#1
000052  542a              STRB     r2,[r5,r0]
;;;252    	data[i++] = DP_INT16;
000054  2210              MOVS     r2,#0x10
000056  4620              MOV      r0,r4
000058  1c64              ADDS     r4,r4,#1
00005a  542a              STRB     r2,[r5,r0]
;;;253    	data[i++] = 2;
00005c  2202              MOVS     r2,#2
00005e  4620              MOV      r0,r4
000060  1c64              ADDS     r4,r4,#1
000062  542a              STRB     r2,[r5,r0]
;;;254    	data[i++] = (mydp.id >> 8) & 0xff;
000064  4829              LDR      r0,|L1.268|
000066  8840              LDRH     r0,[r0,#2]  ; mydp
000068  0a02              LSRS     r2,r0,#8
00006a  4620              MOV      r0,r4
00006c  1c64              ADDS     r4,r4,#1
00006e  542a              STRB     r2,[r5,r0]
;;;255    	data[i++] = (mydp.id >> 0) & 0xff;
000070  4826              LDR      r0,|L1.268|
000072  7882              LDRB     r2,[r0,#2]  ; mydp
000074  4620              MOV      r0,r4
000076  1c64              ADDS     r4,r4,#1
000078  542a              STRB     r2,[r5,r0]
;;;256    	
;;;257    	data[i++] = 3;
00007a  2203              MOVS     r2,#3
00007c  4620              MOV      r0,r4
00007e  1c64              ADDS     r4,r4,#1
000080  542a              STRB     r2,[r5,r0]
;;;258    	data[i++] = DP_INT32;
000082  2230              MOVS     r2,#0x30
000084  4620              MOV      r0,r4
000086  1c64              ADDS     r4,r4,#1
000088  542a              STRB     r2,[r5,r0]
;;;259    	data[i++] = 4;
00008a  2204              MOVS     r2,#4
00008c  4620              MOV      r0,r4
00008e  1c64              ADDS     r4,r4,#1
000090  542a              STRB     r2,[r5,r0]
;;;260    	data[i++] = (mydp.num >> 24) & 0xff;
000092  481e              LDR      r0,|L1.268|
000094  6840              LDR      r0,[r0,#4]  ; mydp
000096  0e00              LSRS     r0,r0,#24
000098  4621              MOV      r1,r4
00009a  1c64              ADDS     r4,r4,#1
00009c  5468              STRB     r0,[r5,r1]
;;;261    	data[i++] = (mydp.num >> 16) & 0xff;
00009e  481b              LDR      r0,|L1.268|
0000a0  6840              LDR      r0,[r0,#4]  ; mydp
0000a2  f3c04207          UBFX     r2,r0,#16,#8
0000a6  4620              MOV      r0,r4
0000a8  1c64              ADDS     r4,r4,#1
0000aa  542a              STRB     r2,[r5,r0]
;;;262    	data[i++] = (mydp.num >> 8) & 0xff;
0000ac  4817              LDR      r0,|L1.268|
0000ae  8880              LDRH     r0,[r0,#4]  ; mydp
0000b0  f3c02207          UBFX     r2,r0,#8,#8
0000b4  4620              MOV      r0,r4
0000b6  1c64              ADDS     r4,r4,#1
0000b8  542a              STRB     r2,[r5,r0]
;;;263    	data[i++] = (mydp.num >> 0) & 0xff;
0000ba  4814              LDR      r0,|L1.268|
0000bc  7902              LDRB     r2,[r0,#4]  ; mydp
0000be  4620              MOV      r0,r4
0000c0  1c64              ADDS     r4,r4,#1
0000c2  542a              STRB     r2,[r5,r0]
;;;264    	
;;;265    	data[i++] = 4;
0000c4  2204              MOVS     r2,#4
0000c6  4620              MOV      r0,r4
0000c8  1c64              ADDS     r4,r4,#1
0000ca  542a              STRB     r2,[r5,r0]
;;;266    	data[i++] = DP_STRING;
0000cc  2290              MOVS     r2,#0x90
0000ce  4620              MOV      r0,r4
0000d0  1c64              ADDS     r4,r4,#1
0000d2  542a              STRB     r2,[r5,r0]
;;;267    	data[i++] = strlen(mydp.name);
0000d4  490d              LDR      r1,|L1.268|
0000d6  6888              LDR      r0,[r1,#8]  ; mydp
0000d8  f7fffffe          BL       strlen
0000dc  b2c2              UXTB     r2,r0
0000de  4620              MOV      r0,r4
0000e0  1c64              ADDS     r4,r4,#1
0000e2  542a              STRB     r2,[r5,r0]
;;;268    	memcpy(&data[i],mydp.name,strlen(mydp.name));
0000e4  4909              LDR      r1,|L1.268|
0000e6  6888              LDR      r0,[r1,#8]  ; mydp
0000e8  f7fffffe          BL       strlen
0000ec  4607              MOV      r7,r0
0000ee  4a07              LDR      r2,|L1.268|
0000f0  1928              ADDS     r0,r5,r4
0000f2  6891              LDR      r1,[r2,#8]  ; mydp
0000f4  463a              MOV      r2,r7
0000f6  f7fffffe          BL       __aeabi_memcpy
;;;269    	i = i + strlen(mydp.name);
0000fa  4904              LDR      r1,|L1.268|
0000fc  6888              LDR      r0,[r1,#8]  ; mydp
0000fe  f7fffffe          BL       strlen
000102  4404              ADD      r4,r4,r0
;;;270    	
;;;271    	*datalen = i;
000104  6034              STR      r4,[r6,#0]
;;;272    }
000106  e8bd81f0          POP      {r4-r8,pc}
;;;273    static XLINK_FUNC void xlink_demo_work_init(void) {
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      mydp

                          AREA ||i.SetDataPiont||, CODE, READONLY, ALIGN=1

                  SetDataPiont PROC
;;;231    
;;;232    static void SetDataPiont(unsigned char *data, int datalen)
000000  4770              BX       lr
;;;233    {
;;;234        //XlinkUartSend(data, datalen);
;;;235    }
;;;236    static void GetAllDataPiont(unsigned char *data, int *datalen)
                          ENDP


                          AREA ||i.UartBufAddData||, CODE, READONLY, ALIGN=2

                  UartBufAddData PROC
;;;406    
;;;407    void UartBufAddData(uint8_t *s ,uint16_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;408    {
000002  4602              MOV      r2,r0
;;;409    	int i = 0;
000004  2000              MOVS     r0,#0
;;;410    	for (i = 0; i < len; i++) {
000006  bf00              NOP      
000008  e026              B        |L3.88|
                  |L3.10|
;;;411    		if ((uartbufwear + 1) < UARTBUF_MAX_LEN) {
00000a  4b15              LDR      r3,|L3.96|
00000c  881b              LDRH     r3,[r3,#0]  ; uartbufwear
00000e  1c5b              ADDS     r3,r3,#1
000010  f5b36f00          CMP      r3,#0x800
000014  da12              BGE      |L3.60|
;;;412    			if ((uartbufwear + 1) != uartbufhead) {
000016  4b12              LDR      r3,|L3.96|
000018  881b              LDRH     r3,[r3,#0]  ; uartbufwear
00001a  1c5b              ADDS     r3,r3,#1
00001c  4c11              LDR      r4,|L3.100|
00001e  8824              LDRH     r4,[r4,#0]  ; uartbufhead
000020  42a3              CMP      r3,r4
000022  d00a              BEQ      |L3.58|
;;;413    				uartbufwear++;
000024  4b0e              LDR      r3,|L3.96|
000026  881b              LDRH     r3,[r3,#0]  ; uartbufwear
000028  1c5b              ADDS     r3,r3,#1
00002a  4c0d              LDR      r4,|L3.96|
00002c  8023              STRH     r3,[r4,#0]
;;;414    				uartbuf[uartbufwear] = s[i];
00002e  5c13              LDRB     r3,[r2,r0]
000030  4c0d              LDR      r4,|L3.104|
000032  4d0b              LDR      r5,|L3.96|
000034  882d              LDRH     r5,[r5,#0]  ; uartbufwear
000036  5563              STRB     r3,[r4,r5]
000038  e00d              B        |L3.86|
                  |L3.58|
;;;415    			}
;;;416    			else {
;;;417    				//add null
;;;418    				return;
;;;419    			}
;;;420    		}
;;;421    		else if(uartbufhead != 0) {
;;;422    			uartbufwear = 0;
;;;423    			uartbuf[uartbufwear] = s[i];
;;;424    		}
;;;425    		else {
;;;426    			//add null
;;;427    			return;
;;;428    		}
;;;429    	}	
;;;430    }
00003a  bd30              POP      {r4,r5,pc}
                  |L3.60|
00003c  4b09              LDR      r3,|L3.100|
00003e  881b              LDRH     r3,[r3,#0]            ;421  ; uartbufhead
000040  b143              CBZ      r3,|L3.84|
000042  2300              MOVS     r3,#0                 ;422
000044  4c06              LDR      r4,|L3.96|
000046  8023              STRH     r3,[r4,#0]            ;422
000048  5c13              LDRB     r3,[r2,r0]            ;423
00004a  4c07              LDR      r4,|L3.104|
00004c  4d04              LDR      r5,|L3.96|
00004e  882d              LDRH     r5,[r5,#0]            ;423  ; uartbufwear
000050  5563              STRB     r3,[r4,r5]            ;423
000052  e000              B        |L3.86|
                  |L3.84|
000054  e7f1              B        |L3.58|
                  |L3.86|
000056  1c40              ADDS     r0,r0,#1              ;410
                  |L3.88|
000058  4288              CMP      r0,r1                 ;410
00005a  dbd6              BLT      |L3.10|
00005c  bf00              NOP      
00005e  e7ec              B        |L3.58|
;;;431    void UartBufOutData(uint8_t *s ,uint16_t *len)
                          ENDP

                  |L3.96|
                          DCD      uartbufwear
                  |L3.100|
                          DCD      uartbufhead
                  |L3.104|
                          DCD      uartbuf

                          AREA ||i.UartBufOutData||, CODE, READONLY, ALIGN=2

                  UartBufOutData PROC
;;;430    }
;;;431    void UartBufOutData(uint8_t *s ,uint16_t *len)
000000  b570              PUSH     {r4-r6,lr}
;;;432    {
000002  4602              MOV      r2,r0
;;;433    	int tem = 0;	
000004  2000              MOVS     r0,#0
;;;434    	int i = 0;
000006  2300              MOVS     r3,#0
;;;435    	for (i = 0; i < *len; i++) {
000008  bf00              NOP      
00000a  e029              B        |L4.96|
                  |L4.12|
;;;436    		if ((uartbufhead + 1) < UARTBUF_MAX_LEN) {
00000c  4c17              LDR      r4,|L4.108|
00000e  8824              LDRH     r4,[r4,#0]  ; uartbufhead
000010  1c64              ADDS     r4,r4,#1
000012  f5b46f00          CMP      r4,#0x800
000016  da13              BGE      |L4.64|
;;;437    			if ((uartbufhead) != uartbufwear) {
000018  4c14              LDR      r4,|L4.108|
00001a  8824              LDRH     r4,[r4,#0]  ; uartbufhead
00001c  4d14              LDR      r5,|L4.112|
00001e  882d              LDRH     r5,[r5,#0]  ; uartbufwear
000020  42ac              CMP      r4,r5
000022  d00b              BEQ      |L4.60|
;;;438    				uartbufhead++;
000024  4c11              LDR      r4,|L4.108|
000026  8824              LDRH     r4,[r4,#0]  ; uartbufhead
000028  1c64              ADDS     r4,r4,#1
00002a  4d10              LDR      r5,|L4.108|
00002c  802c              STRH     r4,[r5,#0]
;;;439    				s[tem++] = uartbuf[uartbufhead];
00002e  4c11              LDR      r4,|L4.116|
000030  882d              LDRH     r5,[r5,#0]  ; uartbufhead
000032  5d66              LDRB     r6,[r4,r5]
000034  4604              MOV      r4,r0
000036  1c40              ADDS     r0,r0,#1
000038  5516              STRB     r6,[r2,r4]
00003a  e010              B        |L4.94|
                  |L4.60|
;;;440    			}
;;;441    			else {
;;;442    				//add null
;;;443    				*len = tem;
00003c  8008              STRH     r0,[r1,#0]
                  |L4.62|
;;;444    				return;
;;;445    			}
;;;446    		}
;;;447    		else if(uartbufwear != 0) {
;;;448    			uartbufhead = 0;
;;;449    			s[tem++] = uartbuf[uartbufhead];
;;;450    		}
;;;451    		else {
;;;452    			//add null
;;;453    			*len = tem;
;;;454    			return;
;;;455    		}
;;;456    	}
;;;457    	*len = tem;	
;;;458    }
00003e  bd70              POP      {r4-r6,pc}
                  |L4.64|
000040  4c0b              LDR      r4,|L4.112|
000042  8824              LDRH     r4,[r4,#0]            ;447  ; uartbufwear
000044  b14c              CBZ      r4,|L4.90|
000046  2400              MOVS     r4,#0                 ;448
000048  4d08              LDR      r5,|L4.108|
00004a  802c              STRH     r4,[r5,#0]            ;448
00004c  4c09              LDR      r4,|L4.116|
00004e  882d              LDRH     r5,[r5,#0]            ;449  ; uartbufhead
000050  5d66              LDRB     r6,[r4,r5]            ;449
000052  4604              MOV      r4,r0                 ;449
000054  1c40              ADDS     r0,r0,#1              ;449
000056  5516              STRB     r6,[r2,r4]            ;449
000058  e001              B        |L4.94|
                  |L4.90|
00005a  8008              STRH     r0,[r1,#0]            ;453
00005c  e7ef              B        |L4.62|
                  |L4.94|
00005e  1c5b              ADDS     r3,r3,#1              ;435
                  |L4.96|
000060  880c              LDRH     r4,[r1,#0]            ;435
000062  429c              CMP      r4,r3                 ;435
000064  dcd2              BGT      |L4.12|
000066  8008              STRH     r0,[r1,#0]            ;457
000068  bf00              NOP      
00006a  e7e8              B        |L4.62|
;;;459     #ifndef __LPT200__
                          ENDP

                  |L4.108|
                          DCD      uartbufhead
                  |L4.112|
                          DCD      uartbufwear
                  |L4.116|
                          DCD      uartbuf

                          AREA ||i.XlinkUartSend||, CODE, READONLY, ALIGN=2

                  XlinkUartSend PROC
;;;198    
;;;199    XLINK_FUNC int XlinkUartSend(unsigned char *Buffer, unsigned short BufferLen) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;200    	g_AllSta.bit.isSendUartData = 1;
000006  4807              LDR      r0,|L5.36|
000008  7800              LDRB     r0,[r0,#0]  ; g_AllSta
00000a  f0200008          BIC      r0,r0,#8
00000e  3008              ADDS     r0,r0,#8
000010  4904              LDR      r1,|L5.36|
000012  7008              STRB     r0,[r1,#0]
;;;201    	hfuart_send(HFUART0, (char*) Buffer, BufferLen, 5);
000014  2305              MOVS     r3,#5
000016  4622              MOV      r2,r4
000018  4629              MOV      r1,r5
00001a  2009              MOVS     r0,#9
00001c  f7fffffe          BL       hfuart_send
;;;202    	return BufferLen;
000020  4620              MOV      r0,r4
;;;203    }
000022  bd70              POP      {r4-r6,pc}
;;;204    
                          ENDP

                  |L5.36|
                          DCD      g_AllSta

                          AREA ||i.airkiss_domain_lop||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  airkiss_domain_lop PROC
;;;462    
;;;463    void USER_FUNC airkiss_domain_lop(void *args) {
000000  f5ad7d0a          SUB      sp,sp,#0x228
;;;464    //airkiss
;;;465    #define  DEVICE_TYPE    "gh_d62c3dfd12ac"
;;;466        int ret = -1;
000004  f04f35ff          MOV      r5,#0xffffffff
;;;467    		xlink_set_fd ak_fd_set;
;;;468    		struct timeval timeoutal;
;;;469    	
;;;470    		uint32_t  akcounttime = 0;
000008  2600              MOVS     r6,#0
;;;471    		unsigned char ak_buf[200];
;;;472    		unsigned short  ak_buf_len = 200;   
00000a  20c8              MOVS     r0,#0xc8
00000c  9054              STR      r0,[sp,#0x150]
;;;473    
;;;474        const int port=12476;
00000e  bf00              NOP      
;;;475        uint32_t sin_len;  
;;;476        char message[256];  
;;;477        int revmessagelen = 0;  
000010  2700              MOVS     r7,#0
;;;478    
;;;479        int deviceid = 0;
000012  f04f0800          MOV      r8,#0
;;;480    		char strdeviceid[20];
;;;481    	
;;;482    		/* server addr */
;;;483        struct sockaddr_in addrto;  
;;;484    		/* client addr */
;;;485        int socket_descriptor;  
;;;486        struct sockaddr_in sin;  
;;;487    		
;;;488    		const int opt = 1;
000016  2001              MOVS     r0,#1
000018  9005              STR      r0,[sp,#0x14]
;;;489    	
;;;490    		//debug airkiss version
;;;491    		u_printf("airkiss_version is %s\r\n",airkiss_version());
00001a  f7fffffe          BL       airkiss_version
00001e  4681              MOV      r9,r0
000020  464a              MOV      r2,r9
000022  a188              ADR      r1,|L6.580|
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       HF_Debug
;;;492    		
;;;493    		//get device id
;;;494        deviceid = XlinkSystemGetDeviceID();
00002a  f7fffffe          BL       XlinkSystemGetDeviceID
00002e  4680              MOV      r8,r0
;;;495        while(deviceid == 0) {
000030  e006              B        |L6.64|
                  |L6.50|
;;;496            msleep(1000);
000032  f44f707a          MOV      r0,#0x3e8
000036  f7fffffe          BL       hf_thread_delay
;;;497            deviceid = XlinkSystemGetDeviceID();
00003a  f7fffffe          BL       XlinkSystemGetDeviceID
00003e  4680              MOV      r8,r0
                  |L6.64|
000040  f1b80f00          CMP      r8,#0                 ;495
000044  d0f5              BEQ      |L6.50|
;;;498        }    
;;;499        sprintf(strdeviceid,"%d",deviceid);
000046  4642              MOV      r2,r8
000048  a184              ADR      r1,|L6.604|
00004a  a80e              ADD      r0,sp,#0x38
00004c  f7fffffe          BL       __2sprintf
;;;500        u_printf("******************************device id is %s****************************\r\n",strdeviceid); 
000050  aa0e              ADD      r2,sp,#0x38
000052  4983              LDR      r1,|L6.608|
000054  200a              MOVS     r0,#0xa
000056  f7fffffe          BL       HF_Debug
;;;501    
;;;502        /* server addr */
;;;503        memset(&addrto,0, sizeof(struct sockaddr_in));  
00005a  2000              MOVS     r0,#0
00005c  900a              STR      r0,[sp,#0x28]
00005e  900b              STR      r0,[sp,#0x2c]
000060  900c              STR      r0,[sp,#0x30]
000062  900d              STR      r0,[sp,#0x34]
;;;504        addrto.sin_family=AF_INET;  
000064  2002              MOVS     r0,#2
000066  f88d0029          STRB     r0,[sp,#0x29]
;;;505        addrto.sin_addr.s_addr=0xffffffff;  
00006a  1ec0              SUBS     r0,r0,#3
00006c  900b              STR      r0,[sp,#0x2c]
;;;506        addrto.sin_port=htons(port);  
00006e  f24300bc          MOV      r0,#0x30bc
000072  f7fffffe          BL       lwip_htons
000076  f8ad002a          STRH     r0,[sp,#0x2a]
;;;507    
;;;508    		/* client addr */
;;;509        memset(&sin,0,sizeof(sin));  
00007a  2000              MOVS     r0,#0
00007c  9006              STR      r0,[sp,#0x18]
00007e  9007              STR      r0,[sp,#0x1c]
000080  9008              STR      r0,[sp,#0x20]
000082  9009              STR      r0,[sp,#0x24]
;;;510        sin.sin_family=AF_INET;  
000084  2002              MOVS     r0,#2
000086  f88d0019          STRB     r0,[sp,#0x19]
;;;511        sin.sin_addr.s_addr=htonl(INADDR_ANY);  
00008a  2000              MOVS     r0,#0
00008c  f7fffffe          BL       lwip_htonl
000090  9007              STR      r0,[sp,#0x1c]
;;;512        sin.sin_port=htons(port);  
000092  f24300bc          MOV      r0,#0x30bc
000096  f7fffffe          BL       lwip_htons
00009a  f8ad001a          STRH     r0,[sp,#0x1a]
;;;513        sin_len=sizeof(sin);  
00009e  2010              MOVS     r0,#0x10
0000a0  9053              STR      r0,[sp,#0x14c]
;;;514    		
;;;515        //socket       
;;;516    		socket_descriptor=xlink_socket(AF_INET,SOCK_DGRAM,0); 
0000a2  2200              MOVS     r2,#0
0000a4  2102              MOVS     r1,#2
0000a6  4608              MOV      r0,r1
0000a8  f7fffffe          BL       hf_lwip_socket
0000ac  4604              MOV      r4,r0
;;;517    		while(socket_descriptor <1) {
0000ae  e00d              B        |L6.204|
                  |L6.176|
;;;518    			u_printf("udp creat fail!\r\n");
0000b0  a16c              ADR      r1,|L6.612|
0000b2  200a              MOVS     r0,#0xa
0000b4  f7fffffe          BL       HF_Debug
;;;519    			msleep(2000);
0000b8  f44f60fa          MOV      r0,#0x7d0
0000bc  f7fffffe          BL       hf_thread_delay
;;;520    			socket_descriptor =xlink_socket(AF_INET,SOCK_DGRAM,0); 	
0000c0  2200              MOVS     r2,#0
0000c2  2102              MOVS     r1,#2
0000c4  4608              MOV      r0,r1
0000c6  f7fffffe          BL       hf_lwip_socket
0000ca  4604              MOV      r4,r0
                  |L6.204|
0000cc  2c01              CMP      r4,#1                 ;517
0000ce  dbef              BLT      |L6.176|
;;;521    		}
;;;522        xlink_setsockopt(socket_descriptor, SOL_SOCKET, SO_BROADCAST, (char *)&opt, sizeof(opt));	
0000d0  2004              MOVS     r0,#4
0000d2  ab05              ADD      r3,sp,#0x14
0000d4  2220              MOVS     r2,#0x20
0000d6  f64071ff          MOV      r1,#0xfff
0000da  9000              STR      r0,[sp,#0]
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       lwip_setsockopt
;;;523        bind(socket_descriptor,(struct sockaddr *)&sin,sizeof(sin));  	
0000e2  2210              MOVS     r2,#0x10
0000e4  a906              ADD      r1,sp,#0x18
0000e6  4620              MOV      r0,r4
0000e8  f7fffffe          BL       lwip_bind
;;;524    		
;;;525    		//set upd
;;;526    		FD_SET(socket_descriptor, &ak_fd_set);
0000ec  17e1              ASRS     r1,r4,#31
0000ee  eb047151          ADD      r1,r4,r1,LSR #29
0000f2  10c9              ASRS     r1,r1,#3
0000f4  aa89              ADD      r2,sp,#0x224
0000f6  5c51              LDRB     r1,[r2,r1]
0000f8  f0040307          AND      r3,r4,#7
0000fc  2201              MOVS     r2,#1
0000fe  409a              LSLS     r2,r2,r3
000100  4311              ORRS     r1,r1,r2
000102  4620              MOV      r0,r4
000104  17e2              ASRS     r2,r4,#31
000106  eb047252          ADD      r2,r4,r2,LSR #29
00010a  10d2              ASRS     r2,r2,#3
00010c  ab89              ADD      r3,sp,#0x224
00010e  5499              STRB     r1,[r3,r2]
;;;527    		timeoutal.tv_sec = 0;
000110  2000              MOVS     r0,#0
000112  9087              STR      r0,[sp,#0x21c]
;;;528    		timeoutal.tv_usec = 30000;
000114  f2475030          MOV      r0,#0x7530
000118  9088              STR      r0,[sp,#0x220]
;;;529    		
;;;530        while(1)
00011a  e091              B        |L6.576|
                  |L6.284|
;;;531        {  
;;;532    				msleep(70);
00011c  2046              MOVS     r0,#0x46
00011e  f7fffffe          BL       hf_thread_delay
;;;533    				//send login packet
;;;534            akcounttime++;
000122  1c76              ADDS     r6,r6,#1
;;;535            if (akcounttime >= 30) {
000124  2e1e              CMP      r6,#0x1e
000126  d32d              BCC      |L6.388|
;;;536                ak_buf_len = sizeof(ak_buf);
000128  20c8              MOVS     r0,#0xc8
00012a  9054              STR      r0,[sp,#0x150]
;;;537                ret = airkiss_lan_pack(AIRKISS_LAN_SSDP_NOTIFY_CMD,DEVICE_TYPE,strdeviceid,0,0,ak_buf,&ak_buf_len,&akconf);
00012c  4852              LDR      r0,|L6.632|
00012e  a954              ADD      r1,sp,#0x150
000130  aa55              ADD      r2,sp,#0x154
000132  2300              MOVS     r3,#0
000134  e9cd3200          STRD     r3,r2,[sp,#0]
000138  e9cd1002          STRD     r1,r0,[sp,#8]
00013c  aa0e              ADD      r2,sp,#0x38
00013e  a14f              ADR      r1,|L6.636|
000140  f2410002          MOV      r0,#0x1002
000144  f7fffffe          BL       airkiss_lan_pack
000148  4605              MOV      r5,r0
;;;538                if (ret != AIRKISS_LAN_PAKE_READY) {
00014a  2d02              CMP      r5,#2
00014c  d004              BEQ      |L6.344|
;;;539                   u_printf("t Pack lan packet error!\r\n");
00014e  a14f              ADR      r1,|L6.652|
000150  200a              MOVS     r0,#0xa
000152  f7fffffe          BL       HF_Debug
000156  e014              B        |L6.386|
                  |L6.344|
;;;540                }
;;;541                else {
;;;542    							if(sendto(socket_descriptor, ak_buf, ak_buf_len,0,(struct sockaddr*)&addrto,sizeof(addrto)) != 0) 
000158  2010              MOVS     r0,#0x10
00015a  a90a              ADD      r1,sp,#0x28
00015c  2300              MOVS     r3,#0
00015e  e9cd1000          STRD     r1,r0,[sp,#0]
000162  f8bd2150          LDRH     r2,[sp,#0x150]
000166  a955              ADD      r1,sp,#0x154
000168  4620              MOV      r0,r4
00016a  f7fffffe          BL       lwip_sendto
00016e  b120              CBZ      r0,|L6.378|
;;;543    							{
;;;544    								 u_printf("t Send message success.\r\n"); 
000170  a14d              ADR      r1,|L6.680|
000172  200a              MOVS     r0,#0xa
000174  f7fffffe          BL       HF_Debug
000178  e003              B        |L6.386|
                  |L6.378|
;;;545    							}
;;;546    							else {
;;;547    								 u_printf("t Send message failed.\r\n");
00017a  a152              ADR      r1,|L6.708|
00017c  200a              MOVS     r0,#0xa
00017e  f7fffffe          BL       HF_Debug
                  |L6.386|
;;;548    							}
;;;549                }
;;;550                akcounttime = 0;
000182  2600              MOVS     r6,#0
                  |L6.388|
;;;551            }
;;;552    			
;;;553    				//recevie packet
;;;554    				ret = xlink_select(socket_descriptor + 1, &ak_fd_set, NULL, NULL, &timeoutal);
000184  a887              ADD      r0,sp,#0x21c
000186  2300              MOVS     r3,#0
000188  461a              MOV      r2,r3
00018a  a989              ADD      r1,sp,#0x224
00018c  9000              STR      r0,[sp,#0]
00018e  1c60              ADDS     r0,r4,#1
000190  f7fffffe          BL       hfuart_select
000194  4605              MOV      r5,r0
;;;555            if ((ret > 0) && FD_ISSET(socket_descriptor, &ak_fd_set)) {
000196  2d00              CMP      r5,#0
000198  dd52              BLE      |L6.576|
00019a  17e1              ASRS     r1,r4,#31
00019c  eb047151          ADD      r1,r4,r1,LSR #29
0001a0  10c9              ASRS     r1,r1,#3
0001a2  aa89              ADD      r2,sp,#0x224
0001a4  5c51              LDRB     r1,[r2,r1]
0001a6  f0040307          AND      r3,r4,#7
0001aa  2201              MOVS     r2,#1
0001ac  409a              LSLS     r2,r2,r3
0001ae  4211              TST      r1,r2
0001b0  d046              BEQ      |L6.576|
;;;556    					//data is ready
;;;557    					revmessagelen = recvfrom(socket_descriptor,message,sizeof(message) - 1,0,(struct sockaddr *)&sin,&sin_len); 
0001b2  a853              ADD      r0,sp,#0x14c
0001b4  a906              ADD      r1,sp,#0x18
0001b6  2300              MOVS     r3,#0
0001b8  22ff              MOVS     r2,#0xff
0001ba  e9cd1000          STRD     r1,r0,[sp,#0]
0001be  a913              ADD      r1,sp,#0x4c
0001c0  4620              MOV      r0,r4
0001c2  f7fffffe          BL       hf_lwip_recvfrom
0001c6  4607              MOV      r7,r0
;;;558    					if (revmessagelen > 0) {             
0001c8  2f00              CMP      r7,#0
0001ca  dd39              BLE      |L6.576|
;;;559    							ret = airkiss_lan_recv(message,revmessagelen,&akconf);
0001cc  b2b9              UXTH     r1,r7
0001ce  4a2a              LDR      r2,|L6.632|
0001d0  a813              ADD      r0,sp,#0x4c
0001d2  f7fffffe          BL       airkiss_lan_recv
0001d6  4605              MOV      r5,r0
;;;560    							if (ret == AIRKISS_LAN_SSDP_REQ) {	
0001d8  2d01              CMP      r5,#1
0001da  d12d              BNE      |L6.568|
;;;561    								ak_buf_len = sizeof(ak_buf);
0001dc  20c8              MOVS     r0,#0xc8
0001de  9054              STR      r0,[sp,#0x150]
;;;562    								ret = airkiss_lan_pack(AIRKISS_LAN_SSDP_RESP_CMD,DEVICE_TYPE,strdeviceid,0,0,ak_buf,&ak_buf_len,&akconf);
0001e0  4825              LDR      r0,|L6.632|
0001e2  a954              ADD      r1,sp,#0x150
0001e4  aa55              ADD      r2,sp,#0x154
0001e6  2300              MOVS     r3,#0
0001e8  e9cd3200          STRD     r3,r2,[sp,#0]
0001ec  e9cd1002          STRD     r1,r0,[sp,#8]
0001f0  aa0e              ADD      r2,sp,#0x38
0001f2  a122              ADR      r1,|L6.636|
0001f4  f2410001          MOV      r0,#0x1001
0001f8  f7fffffe          BL       airkiss_lan_pack
0001fc  4605              MOV      r5,r0
;;;563    								if (ret != AIRKISS_LAN_PAKE_READY) {
0001fe  2d02              CMP      r5,#2
000200  d004              BEQ      |L6.524|
;;;564    									u_printf("Pack lan packet error!\r\n");
000202  a137              ADR      r1,|L6.736|
000204  200a              MOVS     r0,#0xa
000206  f7fffffe          BL       HF_Debug
00020a  e019              B        |L6.576|
                  |L6.524|
;;;565    								}
;;;566    								else 
;;;567    								{
;;;568    									if(sendto(socket_descriptor, ak_buf, ak_buf_len,0,(struct sockaddr*)&sin,sizeof(sin)) != 0) 
00020c  2010              MOVS     r0,#0x10
00020e  a906              ADD      r1,sp,#0x18
000210  2300              MOVS     r3,#0
000212  e9cd1000          STRD     r1,r0,[sp,#0]
000216  f8bd2150          LDRH     r2,[sp,#0x150]
00021a  a955              ADD      r1,sp,#0x154
00021c  4620              MOV      r0,r4
00021e  f7fffffe          BL       lwip_sendto
000222  b120              CBZ      r0,|L6.558|
;;;569    									{
;;;570    										u_printf("Send message success.\r\n");  
000224  a135              ADR      r1,|L6.764|
000226  200a              MOVS     r0,#0xa
000228  f7fffffe          BL       HF_Debug
00022c  e008              B        |L6.576|
                  |L6.558|
;;;571    									}
;;;572    									else {
;;;573    										u_printf("Send message failed.\r\n"); 
00022e  a139              ADR      r1,|L6.788|
000230  200a              MOVS     r0,#0xa
000232  f7fffffe          BL       HF_Debug
000236  e003              B        |L6.576|
                  |L6.568|
;;;574    									}
;;;575    								}
;;;576    							}
;;;577    							else {
;;;578    								u_printf("Pack is not ssdq req!\r\n");
000238  a13c              ADR      r1,|L6.812|
00023a  200a              MOVS     r0,#0xa
00023c  f7fffffe          BL       HF_Debug
                  |L6.576|
000240  e76c              B        |L6.284|
;;;579    							}
;;;580    					}		
;;;581    				}					
;;;582        }    
;;;583    }
;;;584    #endif
                          ENDP

000242  0000              DCW      0x0000
                  |L6.580|
000244  6169726b          DCB      "airkiss_version is %s\r\n",0
000248  6973735f
00024c  76657273
000250  696f6e20
000254  69732025
000258  730d0a00
                  |L6.604|
00025c  256400            DCB      "%d",0
00025f  00                DCB      0
                  |L6.608|
                          DCD      ||.constdata||
                  |L6.612|
000264  75647020          DCB      "udp creat fail!\r\n",0
000268  63726561
00026c  74206661
000270  696c210d
000274  0a00    
000276  00                DCB      0
000277  00                DCB      0
                  |L6.632|
                          DCD      akconf
                  |L6.636|
00027c  67685f64          DCB      "gh_d62c3dfd12ac",0
000280  36326333
000284  64666431
000288  32616300
                  |L6.652|
00028c  74205061          DCB      "t Pack lan packet error!\r\n",0
000290  636b206c
000294  616e2070
000298  61636b65
00029c  74206572
0002a0  726f7221
0002a4  0d0a00  
0002a7  00                DCB      0
                  |L6.680|
0002a8  74205365          DCB      "t Send message success.\r\n",0
0002ac  6e64206d
0002b0  65737361
0002b4  67652073
0002b8  75636365
0002bc  73732e0d
0002c0  0a00    
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L6.708|
0002c4  74205365          DCB      "t Send message failed.\r\n",0
0002c8  6e64206d
0002cc  65737361
0002d0  67652066
0002d4  61696c65
0002d8  642e0d0a
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L6.736|
0002e0  5061636b          DCB      "Pack lan packet error!\r\n",0
0002e4  206c616e
0002e8  20706163
0002ec  6b657420
0002f0  6572726f
0002f4  72210d0a
0002f8  00      
0002f9  00                DCB      0
0002fa  00                DCB      0
0002fb  00                DCB      0
                  |L6.764|
0002fc  53656e64          DCB      "Send message success.\r\n",0
000300  206d6573
000304  73616765
000308  20737563
00030c  63657373
000310  2e0d0a00
                  |L6.788|
000314  53656e64          DCB      "Send message failed.\r\n",0
000318  206d6573
00031c  73616765
000320  20666169
000324  6c65642e
000328  0d0a00  
00032b  00                DCB      0
                  |L6.812|
00032c  5061636b          DCB      "Pack is not ssdq req!\r\n",0
000330  20697320
000334  6e6f7420
000338  73736471
00033c  20726571
000340  210d0a00

                          AREA ||i.app_status||, CODE, READONLY, ALIGN=2

                  app_status PROC
;;;119     */
;;;120    static XLINK_FUNC void app_status(XLINK_APP_STATUS status) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;121    
;;;122    	switch (status) {
000004  2c20              CMP      r4,#0x20
000006  d00d              BEQ      |L7.36|
000008  dc06              BGT      |L7.24|
00000a  2c04              CMP      r4,#4
00000c  d00c              BEQ      |L7.40|
00000e  2c08              CMP      r4,#8
000010  d00b              BEQ      |L7.42|
000012  2c10              CMP      r4,#0x10
000014  d147              BNE      |L7.166|
000016  e004              B        |L7.34|
                  |L7.24|
000018  2c40              CMP      r4,#0x40
00001a  d004              BEQ      |L7.38|
00001c  2c80              CMP      r4,#0x80
00001e  d142              BNE      |L7.166|
000020  e021              B        |L7.102|
                  |L7.34|
;;;123    //	case XLINK_WIFI_STA_PRO_TESTCOMPLETE:
;;;124    //		break;
;;;125    	case XLINK_WIFI_STA_APP_CONNECT: /*用户连接*/
;;;126    		//u_printf("****new app connect****\r\n");
;;;127    		break;
000022  e040              B        |L7.166|
                  |L7.36|
;;;128    	case XLINK_WIFI_STA_APP_DISCONNECT:/*用户离开*/
;;;129    		//u_printf("**** app disconnect****\r\n");
;;;130    		break;
000024  e03f              B        |L7.166|
                  |L7.38|
;;;131    	case XLINK_WIFI_STA_APP_TIMEOUT:/*通讯超时*/
;;;132    		//u_printf("**** app timeout****\r\n");
;;;133    		break;
000026  e03e              B        |L7.166|
                  |L7.40|
;;;134    	case XLINK_WIFI_STA_CONNECT_SERVER:
;;;135    		//u_printf("**** tcp connect to server success****\r\n");
;;;136    		
;;;137    		break;
000028  e03d              B        |L7.166|
                  |L7.42|
;;;138    	case XLINK_WIFI_STA_DISCONNCT_SERVER:
;;;139    		hfgpio_fset_out_high(HFGPIO_F_STATE);
00002a  f04f5100          MOV      r1,#0x20000000
00002e  2022              MOVS     r0,#0x22
000030  f7fffffe          BL       hfgpio_configure_fpin
;;;140    		Isconnectserver = 0;
000034  2000              MOVS     r0,#0
000036  491d              LDR      r1,|L7.172|
000038  7008              STRB     r0,[r1,#0]
;;;141    		u_printf("**** tcp  disconnect server ****\r\n");
00003a  a11d              ADR      r1,|L7.176|
00003c  200a              MOVS     r0,#0xa
00003e  f7fffffe          BL       HF_Debug
;;;142    		if (g_AllSta.bit.isConnectedServer == 1) {
000042  4824              LDR      r0,|L7.212|
000044  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000046  f0100f01          TST      r0,#1
00004a  d00b              BEQ      |L7.100|
;;;143    			g_AllSta.bit.isConnectedServer = 0;
00004c  4821              LDR      r0,|L7.212|
00004e  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000050  f0200001          BIC      r0,r0,#1
000054  491f              LDR      r1,|L7.212|
000056  7008              STRB     r0,[r1,#0]
;;;144    			g_AllSta.bit.isNeedSend = 1;
000058  4608              MOV      r0,r1
00005a  7800              LDRB     r0,[r0,#0]  ; g_AllSta
00005c  f0200004          BIC      r0,r0,#4
000060  1d00              ADDS     r0,r0,#4
000062  7008              STRB     r0,[r1,#0]
                  |L7.100|
;;;145    		}
;;;146    		break;
000064  e01f              B        |L7.166|
                  |L7.102|
;;;147    	case XLINK_WIFI_STA_LOGIN_SUCCESS:
;;;148    		u_printf("**** device login success****\r\n");
000066  a11c              ADR      r1,|L7.216|
000068  200a              MOVS     r0,#0xa
00006a  f7fffffe          BL       HF_Debug
;;;149    		g_AllSta.bit.isConnectedServer = 1;
00006e  4819              LDR      r0,|L7.212|
000070  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000072  f0200001          BIC      r0,r0,#1
000076  1c40              ADDS     r0,r0,#1
000078  4916              LDR      r1,|L7.212|
00007a  7008              STRB     r0,[r1,#0]
;;;150    		g_AllSta.bit.isNeedSend = 1;
00007c  4608              MOV      r0,r1
00007e  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000080  f0200004          BIC      r0,r0,#4
000084  1d00              ADDS     r0,r0,#4
000086  7008              STRB     r0,[r1,#0]
;;;151    		g_AllSta.bit.isNeedSendServerSta = 1;
000088  4608              MOV      r0,r1
00008a  7800              LDRB     r0,[r0,#0]  ; g_AllSta
00008c  f0200020          BIC      r0,r0,#0x20
000090  3020              ADDS     r0,r0,#0x20
000092  7008              STRB     r0,[r1,#0]
;;;152    		hfgpio_fset_out_low(HFGPIO_F_STATE);
000094  f04f5180          MOV      r1,#0x10000000
000098  2022              MOVS     r0,#0x22
00009a  f7fffffe          BL       hfgpio_configure_fpin
;;;153    	Isconnectserver = 1;
00009e  2001              MOVS     r0,#1
0000a0  4902              LDR      r1,|L7.172|
0000a2  7008              STRB     r0,[r1,#0]
;;;154    		break;
0000a4  bf00              NOP      
                  |L7.166|
0000a6  bf00              NOP                            ;127
;;;155    	}
;;;156    
;;;157    }
0000a8  bd10              POP      {r4,pc}
;;;158    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L7.172|
                          DCD      Isconnectserver
                  |L7.176|
0000b0  2a2a2a2a          DCB      "**** tcp  disconnect server ****\r\n",0
0000b4  20746370
0000b8  20206469
0000bc  73636f6e
0000c0  6e656374
0000c4  20736572
0000c8  76657220
0000cc  2a2a2a2a
0000d0  0d0a00  
0000d3  00                DCB      0
                  |L7.212|
                          DCD      g_AllSta
                  |L7.216|
0000d8  2a2a2a2a          DCB      "**** device login success****\r\n",0
0000dc  20646576
0000e0  69636520
0000e4  6c6f6769
0000e8  6e207375
0000ec  63636573
0000f0  732a2a2a
0000f4  2a0d0a00

                          AREA ||i.pipe1_call||, CODE, READONLY, ALIGN=1

                  pipe1_call PROC
;;;100    
;;;101    void pipe1_call(unsigned char * data, unsigned int datalen, x_uint32 device_id, x_uint8 *opt) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;102    	//u_printf("recv tcp pipe package len %d  deviceid %d \r\n", datalen, device_id);
;;;103    	XlinkUartSend(data, datalen);
00000c  b2a1              UXTH     r1,r4
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       XlinkUartSend
;;;104    }
000014  e8bd81f0          POP      {r4-r8,pc}
;;;105    
                          ENDP


                          AREA ||i.time_callback||, CODE, READONLY, ALIGN=2

                  time_callback PROC
;;;227    
;;;228    XLINK_FUNC void static time_callback(XLINK_SYS_TIME *time) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;229    	u_printf("xlink updata current time\r\n");
000004  a102              ADR      r1,|L9.16|
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       HF_Debug
;;;230    }
00000c  bd10              POP      {r4,pc}
;;;231    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
000010  786c696e          DCB      "xlink updata current time\r\n",0
000014  6b207570
000018  64617461
00001c  20637572
000020  72656e74
000024  2074696d
000028  650d0a00

                          AREA ||i.udp_pipe_call||, CODE, READONLY, ALIGN=1

                  udp_pipe_call PROC
;;;105    
;;;106    static void udp_pipe_call(unsigned char *data, unsigned int datalen, xlink_addr *addr) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;107    	//u_printf("recv udp pipe package len %d  \r\n", datalen);
;;;108    	XlinkUartSend(data, datalen);
000008  b2a1              UXTH     r1,r4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       XlinkUartSend
;;;109    }
000010  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP


                          AREA ||i.upgrade_task||, CODE, READONLY, ALIGN=2

                  upgrade_task PROC
;;;216    
;;;217    static void upgrade_task(XLINK_UPGRADE *data) {
000000  b510              PUSH     {r4,lr}
000002  b0c0              SUB      sp,sp,#0x100
000004  4604              MOV      r4,r0
;;;218    	char urlBuf[256];
;;;219    	if (data->urlLength <= 0 || data->urlstr == NULL ) {
000006  8a20              LDRH     r0,[r4,#0x10]
000008  2800              CMP      r0,#0
00000a  dd01              BLE      |L11.16|
00000c  68e0              LDR      r0,[r4,#0xc]
00000e  b928              CBNZ     r0,|L11.28|
                  |L11.16|
;;;220    		u_printf("\r\n----get upgrade url failed\r\n");
000010  a10b              ADR      r1,|L11.64|
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       HF_Debug
                  |L11.24|
;;;221    		return;
;;;222    	}
;;;223    	memset(urlBuf, 0, 256);
;;;224    	memcpy(urlBuf, data->urlstr, data->urlLength);
;;;225    	xlink_update_as_http(urlBuf,"wifixx",data);
;;;226    }
000018  b040              ADD      sp,sp,#0x100
00001a  bd10              POP      {r4,pc}
                  |L11.28|
00001c  f44f7180          MOV      r1,#0x100             ;223
000020  4668              MOV      r0,sp                 ;223
000022  f7fffffe          BL       __aeabi_memclr4
000026  8a22              LDRH     r2,[r4,#0x10]         ;224
000028  4668              MOV      r0,sp                 ;224
00002a  68e1              LDR      r1,[r4,#0xc]          ;224
00002c  f7fffffe          BL       __aeabi_memcpy
000030  4622              MOV      r2,r4                 ;225
000032  a10b              ADR      r1,|L11.96|
000034  4668              MOV      r0,sp                 ;225
000036  f7fffffe          BL       xlink_update_as_http
00003a  bf00              NOP      
00003c  e7ec              B        |L11.24|
;;;227    
                          ENDP

00003e  0000              DCW      0x0000
                  |L11.64|
000040  0d0a2d2d          DCB      "\r\n----get upgrade url failed\r\n",0
000044  2d2d6765
000048  74207570
00004c  67726164
000050  65207572
000054  6c206661
000058  696c6564
00005c  0d0a00  
00005f  00                DCB      0
                  |L11.96|
000060  77696669          DCB      "wifixx",0
000064  787800  
000067  00                DCB      0

                          AREA ||i.xlinkSetUartRate384||, CODE, READONLY, ALIGN=2

                  xlinkSetUartRate384 PROC
;;;158    
;;;159    static void xlinkSetUartRate384(void) {
000000  b570              PUSH     {r4-r6,lr}
000002  b090              SUB      sp,sp,#0x40
;;;160    //	int i =0;
;;;161    //	for (i =0 ;i< UART_PACK_MAX;i++) {
;;;162    //		uart_send_pack[i].flag = 0;
;;;163    //	}
;;;164    	
;;;165    	char buffer[64];
;;;166    	hfat_send_cmd("AT+UART\r\n", sizeof("AT+URAT\r\n"), buffer, 64);
000004  2340              MOVS     r3,#0x40
000006  466a              MOV      r2,sp
000008  210a              MOVS     r1,#0xa
00000a  a01e              ADR      r0,|L12.132|
00000c  f7fffffe          BL       hfat_send_cmd
;;;167    	if (strcmp(buffer + 4, "115200,8,1,None,NFC") != 0) {
000010  a11f              ADR      r1,|L12.144|
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       strcmp
000018  b158              CBZ      r0,|L12.50|
;;;168    		//ret =
;;;169    		hfat_send_cmd("AT+UART=115200,8,1,NONE,NFC,0\r\n", sizeof("AT+UART=115200,8,1,NONE,NFC,0\r\n"), buffer, 64);
00001a  2340              MOVS     r3,#0x40
00001c  466a              MOV      r2,sp
00001e  2120              MOVS     r1,#0x20
000020  a020              ADR      r0,|L12.164|
000022  f7fffffe          BL       hfat_send_cmd
;;;170    		
;;;171    		msleep(1000);
000026  f44f707a          MOV      r0,#0x3e8
00002a  f7fffffe          BL       hf_thread_delay
;;;172    		hfsys_softreset();
00002e  f7fffffe          BL       hfsys_softreset
                  |L12.50|
;;;173    	}
;;;174    	hfat_send_cmd("AT+UARTFL=512\r\n", sizeof("AT+UARTFL=512\r\n"), buffer, 64);
000032  2340              MOVS     r3,#0x40
000034  466a              MOV      r2,sp
000036  2110              MOVS     r1,#0x10
000038  a022              ADR      r0,|L12.196|
00003a  f7fffffe          BL       hfat_send_cmd
;;;175    	char *cmdS = "AT+UARTFT=100\r\n";
00003e  a525              ADR      r5,|L12.212|
;;;176    	hfat_send_cmd(cmdS, xlink_strlen(cmdS), buffer, 64);
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       strlen
000046  4606              MOV      r6,r0
000048  2340              MOVS     r3,#0x40
00004a  466a              MOV      r2,sp
00004c  4631              MOV      r1,r6
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       hfat_send_cmd
;;;177    	cmdS = "AT+NDBGL=0\r\n";
000054  a523              ADR      r5,|L12.228|
;;;178    	hfat_send_cmd(cmdS, xlink_strlen(cmdS), buffer, 64);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       strlen
00005c  4606              MOV      r6,r0
00005e  2340              MOVS     r3,#0x40
000060  466a              MOV      r2,sp
000062  4631              MOV      r1,r6
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       hfat_send_cmd
;;;179    	
;;;180    //	char *macStr = "AT+WSMAC=8888,ACCF2359DDA2\r\n";
;;;181    //	hfat_send_cmd(macStr, xlink_strlen(macStr), buffer, 64);
;;;182    	
;;;183    	char *cmdMode = "AT+WMODE=APSTA\r\n";
00006a  a422              ADR      r4,|L12.244|
;;;184    	hfat_send_cmd(cmdMode, xlink_strlen(cmdMode), buffer, 64);
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       strlen
000072  4606              MOV      r6,r0
000074  2340              MOVS     r3,#0x40
000076  466a              MOV      r2,sp
000078  4631              MOV      r1,r6
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       hfat_send_cmd
;;;185    }
000080  b010              ADD      sp,sp,#0x40
000082  bd70              POP      {r4-r6,pc}
;;;186    
                          ENDP

                  |L12.132|
000084  41542b55          DCB      "AT+UART\r\n",0
000088  4152540d
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L12.144|
000090  31313532          DCB      "115200,8,1,None,NFC",0
000094  30302c38
000098  2c312c4e
00009c  6f6e652c
0000a0  4e464300
                  |L12.164|
0000a4  41542b55          DCB      "AT+UART=115200,8,1,NONE,NFC,0\r\n",0
0000a8  4152543d
0000ac  31313532
0000b0  30302c38
0000b4  2c312c4e
0000b8  4f4e452c
0000bc  4e46432c
0000c0  300d0a00
                  |L12.196|
0000c4  41542b55          DCB      "AT+UARTFL=512\r\n",0
0000c8  41525446
0000cc  4c3d3531
0000d0  320d0a00
                  |L12.212|
0000d4  41542b55          DCB      "AT+UARTFT=100\r\n",0
0000d8  41525446
0000dc  543d3130
0000e0  300d0a00
                  |L12.228|
0000e4  41542b4e          DCB      "AT+NDBGL=0\r\n",0
0000e8  4442474c
0000ec  3d300d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L12.244|
0000f4  41542b57          DCB      "AT+WMODE=APSTA\r\n",0
0000f8  4d4f4445
0000fc  3d415053
000100  54410d0a
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0

                          AREA ||i.xlink_debug_fn_x||, CODE, READONLY, ALIGN=2

                  xlink_debug_fn_x PROC
;;;205    static char log_buf[200];
;;;206    int xlink_debug_fn_x(const char* format, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b508              PUSH     {r3,lr}
;;;207    	xlink_memset(log_buf, 0, 200);
000004  21c8              MOVS     r1,#0xc8
000006  480b              LDR      r0,|L13.52|
000008  f7fffffe          BL       __aeabi_memclr4
;;;208    	va_list args;
;;;209    	va_start(args, format);
00000c  a803              ADD      r0,sp,#0xc
00000e  9000              STR      r0,[sp,#0]
;;;210    	vsnprintf(log_buf, 200, format, args);
000010  21c8              MOVS     r1,#0xc8
000012  4808              LDR      r0,|L13.52|
000014  9b00              LDR      r3,[sp,#0]
000016  9a02              LDR      r2,[sp,#8]
000018  f7fffffe          BL       vsnprintf
;;;211    	va_end(args);
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
;;;212    	u_printf("\r\n==>::%s\r\n", log_buf);
000020  4a04              LDR      r2,|L13.52|
000022  a105              ADR      r1,|L13.56|
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       HF_Debug
;;;213    	return 0;
00002a  2000              MOVS     r0,#0
;;;214    }
00002c  b001              ADD      sp,sp,#4
00002e  f85dfb14          LDR      pc,[sp],#0x14
;;;215    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      log_buf
                  |L13.56|
000038  0d0a3d3d          DCB      "\r\n==>::%s\r\n",0
00003c  3e3a3a25
000040  730d0a00

                          AREA ||i.xlink_demo_init||, CODE, READONLY, ALIGN=2

                  xlink_demo_init PROC
;;;190    
;;;191    XLINK_FUNC int xlink_demo_init(void) {
000000  b510              PUSH     {r4,lr}
;;;192    	xlinkSetUartRate384();
000002  f7fffffe          BL       xlinkSetUartRate384
;;;193    	g_atconfig.flag.byte = 0;
000006  2000              MOVS     r0,#0
000008  4904              LDR      r1,|L14.28|
00000a  7008              STRB     r0,[r1,#0]
;;;194    	XlinkReadAtConfig(&g_atconfig);
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       XlinkReadAtConfig
;;;195    	xlink_demo_work_init();
000012  f7fffffe          BL       xlink_demo_work_init
;;;196    	return 1;
000016  2001              MOVS     r0,#1
;;;197    }
000018  bd10              POP      {r4,pc}
;;;198    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      g_atconfig

                          AREA ||i.xlink_demo_loop||, CODE, READONLY, ALIGN=2

                  xlink_demo_loop PROC
;;;352    
;;;353    XLINK_FUNC void xlink_demo_loop(void) {
000000  2500              MOVS     r5,#0
;;;354    
;;;355    	time_t lop = 0, updateDP = 0;
000002  bf00              NOP      
;;;356    	int temp = 0;
000004  2600              MOVS     r6,#0
;;;357    	uint8_t data[50];
;;;358    	int datalen = 0;
000006  bf00              NOP      
;;;359    	
;;;360    	//启动发送一个状态
;;;361    	g_AllSta.bit.isNeedSend =1;
000008  4828              LDR      r0,|L15.172|
00000a  7800              LDRB     r0,[r0,#0]  ; g_AllSta
00000c  f0200004          BIC      r0,r0,#4
000010  1d00              ADDS     r0,r0,#4
000012  4926              LDR      r1,|L15.172|
000014  7008              STRB     r0,[r1,#0]
;;;362    	while (1) {
000016  e048              B        |L15.170|
                  |L15.24|
;;;363    		time_t t = time(NULL);
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       time
00001e  4604              MOV      r4,r0
;;;364    		g_AllSta.bit.isSendUartData = 0;
000020  4822              LDR      r0,|L15.172|
000022  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000024  f0200008          BIC      r0,r0,#8
000028  4920              LDR      r1,|L15.172|
00002a  7008              STRB     r0,[r1,#0]
;;;365    
;;;366    		XlinkSystemLoop(t, 30);
00002c  211e              MOVS     r1,#0x1e
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       XlinkSystemLoop
;;;367    		
;;;368    		tcpsenbuflen = 800;
000034  f44f7048          MOV      r0,#0x320
000038  491d              LDR      r1,|L15.176|
00003a  8008              STRH     r0,[r1,#0]
;;;369    		UartBufOutData((uint8_t *)tcpsendbuf,(uint16_t *)(&tcpsenbuflen));
00003c  481d              LDR      r0,|L15.180|
00003e  f7fffffe          BL       UartBufOutData
;;;370    		if (tcpsenbuflen >0 ) {
000042  481b              LDR      r0,|L15.176|
000044  8800              LDRH     r0,[r0,#0]  ; tcpsenbuflen
000046  2800              CMP      r0,#0
000048  dd0a              BLE      |L15.96|
;;;371    			XlinkSendTcpPipe2((void *)tcpsendbuf, tcpsenbuflen);
00004a  4819              LDR      r0,|L15.176|
00004c  8801              LDRH     r1,[r0,#0]  ; tcpsenbuflen
00004e  4819              LDR      r0,|L15.180|
000050  f7fffffe          BL       XlinkSendTcpPipe2
;;;372    			XlinkSendUdpPipe((void *)tcpsendbuf, tcpsenbuflen, NULL);
000054  2200              MOVS     r2,#0
000056  4816              LDR      r0,|L15.176|
000058  8801              LDRH     r1,[r0,#0]  ; tcpsenbuflen
00005a  4816              LDR      r0,|L15.180|
00005c  f7fffffe          BL       XlinkSendUdpPipe
                  |L15.96|
;;;373    		}
;;;374    
;;;375    		if (g_AllSta.bit.isSendUartData == 0) {
000060  4812              LDR      r0,|L15.172|
000062  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000064  f3c000c0          UBFX     r0,r0,#3,#1
000068  b960              CBNZ     r0,|L15.132|
;;;376    			if (g_AllSta.bit.isNeedSend == 1) {
00006a  4810              LDR      r0,|L15.172|
00006c  7800              LDRB     r0,[r0,#0]  ; g_AllSta
00006e  f3c00080          UBFX     r0,r0,#2,#1
000072  b138              CBZ      r0,|L15.132|
;;;377    				g_AllSta.bit.isNeedSend = 0;
000074  480d              LDR      r0,|L15.172|
000076  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000078  f0200004          BIC      r0,r0,#4
00007c  490b              LDR      r1,|L15.172|
00007e  7008              STRB     r0,[r1,#0]
;;;378    				xlink_send_uart_sta();
000080  f7fffffe          BL       xlink_send_uart_sta
                  |L15.132|
;;;379    			}
;;;380    		}
;;;381    
;;;382    
;;;383    		temp = TICKS_DIFF(t,lop);
000084  42ac              CMP      r4,r5
000086  d301              BCC      |L15.140|
000088  1b60              SUBS     r0,r4,r5
00008a  e003              B        |L15.148|
                  |L15.140|
00008c  f1c530ff          RSB      r0,r5,#0xffffffff
000090  4420              ADD      r0,r0,r4
000092  1c40              ADDS     r0,r0,#1
                  |L15.148|
000094  4606              MOV      r6,r0
;;;384    		if (temp > 600) {
000096  f5b67f16          CMP      r6,#0x258
00009a  dd02              BLE      |L15.162|
;;;385    			lop = t;
00009c  4625              MOV      r5,r4
;;;386    			XlinkGetServerTime();
00009e  f7fffffe          BL       XlinkGetServerTime
                  |L15.162|
;;;387    		}
;;;388    		
;;;389    		//datapoint
;;;390    //		temp = TICKS_DIFF(t,updateDP);
;;;391    //		if (temp > 2) {
;;;392    //			updateDP = t;
;;;393    //			if (Isconnectserver) {
;;;394    //				mydp.pressure++;
;;;395    //				mydp.temperature++;
;;;396    //                mydp.id++;
;;;397    //                mydp.num++;
;;;398    //				GetAllDataPiont(data,&datalen);
;;;399    //                
;;;400    //				Xlink_UpdateDataPoint(data, datalen,0);
;;;401    //			}
;;;402    //		}
;;;403    		msleep(30);
0000a2  201e              MOVS     r0,#0x1e
0000a4  f7fffffe          BL       hf_thread_delay
;;;404    	}
0000a8  bf00              NOP      
                  |L15.170|
0000aa  e7b5              B        |L15.24|
;;;405    }
;;;406    
                          ENDP

                  |L15.172|
                          DCD      g_AllSta
                  |L15.176|
                          DCD      tcpsenbuflen
                  |L15.180|
                          DCD      tcpsendbuf

                          AREA ||i.xlink_demo_work_init||, CODE, READONLY, ALIGN=2

                  xlink_demo_work_init PROC
;;;272    }
;;;273    static XLINK_FUNC void xlink_demo_work_init(void) {
000000  b530              PUSH     {r4,r5,lr}
000002  b089              SUB      sp,sp,#0x24
;;;274    
;;;275    	int i = 0;
000004  2500              MOVS     r5,#0
;;;276    	char proKey[33];
;;;277    	unsigned char temp;
;;;278    	user_config.tcp_pipe2 = NULL;
000006  2000              MOVS     r0,#0
000008  4946              LDR      r1,|L16.292|
00000a  6008              STR      r0,[r1,#0]  ; user_config
;;;279    	user_config.tcp_pipe = pipe1_call;
00000c  4846              LDR      r0,|L16.296|
00000e  6048              STR      r0,[r1,#4]  ; user_config
;;;280    	user_config.udp_pipe = udp_pipe_call;
000010  4846              LDR      r0,|L16.300|
000012  6088              STR      r0,[r1,#8]  ; user_config
;;;281    	user_config.status = app_status;
000014  4846              LDR      r0,|L16.304|
000016  6148              STR      r0,[r1,#0x14]  ; user_config
;;;282    	user_config.wifi_type = 1;
000018  2001              MOVS     r0,#1
00001a  f8810024          STRB     r0,[r1,#0x24]
;;;283    	user_config.DebugPrintf = xlink_debug_fn_x;
00001e  4845              LDR      r0,|L16.308|
000020  6208              STR      r0,[r1,#0x20]  ; user_config
;;;284    	user_config.in_internet = 1;
000022  2001              MOVS     r0,#1
000024  f881002c          STRB     r0,[r1,#0x2c]
;;;285        
;;;286    	user_config.wifisoftVersion = 2;
000028  2002              MOVS     r0,#2
00002a  84c8              STRH     r0,[r1,#0x26]
;;;287    	user_config.upgrade = upgrade_task;
00002c  4842              LDR      r0,|L16.312|
00002e  6188              STR      r0,[r1,#0x18]  ; user_config
;;;288    	user_config.server_time = time_callback;	
000030  4842              LDR      r0,|L16.316|
000032  61c8              STR      r0,[r1,#0x1c]  ; user_config
;;;289        
;;;290        user_config.mcuHardwareSoftVersion = 1;
000034  2001              MOVS     r0,#1
000036  8548              STRH     r0,[r1,#0x2a]
;;;291        user_config.mcuHardwareVersion = 1;
000038  f8810028          STRB     r0,[r1,#0x28]
;;;292    	
;;;293    	//datapoint must be initialized,if use V2:set callback ,if use V1:set NULL.
;;;294    	user_config.Xlink_GetAllDataPoint = GetAllDataPiont;
00003c  4840              LDR      r0,|L16.320|
00003e  6588              STR      r0,[r1,#0x58]  ; user_config
;;;295    	user_config.Xlink_SetDataPoint = SetDataPiont;
000040  4840              LDR      r0,|L16.324|
000042  6548              STR      r0,[r1,#0x54]  ; user_config
;;;296        
;;;297        user_config.pipetype = 0;
000044  2000              MOVS     r0,#0
000046  f8810050          STRB     r0,[r1,#0x50]
;;;298        user_config.devicetype = 0x0001;
00004a  2001              MOVS     r0,#1
00004c  f8a10052          STRH     r0,[r1,#0x52]
;;;299    
;;;300    	xlinkConfigInit(&user_config);
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       xlinkConfigInit
;;;301    	user_config.maclen = 6;
000056  2006              MOVS     r0,#6
000058  4932              LDR      r1,|L16.292|
00005a  85c8              STRH     r0,[r1,#0x2e]
;;;302    
;;;303    	hfnet_set_udp_broadcast_port_valid(5986, 5988);
00005c  f2417164          MOV      r1,#0x1764
000060  1e88              SUBS     r0,r1,#2
000062  f7fffffe          BL       hfnet_set_udp_broadcast_port_valid
;;;304    	XlinkReadProductIDKEY(m_pID, proKey);
000066  4669              MOV      r1,sp
000068  4837              LDR      r0,|L16.328|
00006a  f7fffffe          BL       XlinkReadProductIDKEY
;;;305    	m_pID[32] = '\0';
00006e  2000              MOVS     r0,#0
000070  4935              LDR      r1,|L16.328|
000072  f8810020          STRB     r0,[r1,#0x20]
;;;306    	proKey[32] = '\0';
000076  f88d0020          STRB     r0,[sp,#0x20]
;;;307    
;;;308    
;;;309    
;;;310    	for (i = 0; i < 32; i++) {
00007a  bf00              NOP      
00007c  e015              B        |L16.170|
                  |L16.126|
;;;311    		temp = m_pID[i];
00007e  4832              LDR      r0,|L16.328|
000080  5d44              LDRB     r4,[r0,r5]
;;;312    		if (temp <= '9' && temp >= '0') {
000082  2c39              CMP      r4,#0x39
000084  dc01              BGT      |L16.138|
000086  2c30              CMP      r4,#0x30
000088  da0e              BGE      |L16.168|
                  |L16.138|
;;;313    		} else if (temp > 'f' || temp < 'a') {
00008a  2c66              CMP      r4,#0x66
00008c  dc01              BGT      |L16.146|
00008e  2c61              CMP      r4,#0x61
000090  da0a              BGE      |L16.168|
                  |L16.146|
;;;314    			memcpy(m_pID, XLINK_PRODUCT_ID, 32);
000092  2220              MOVS     r2,#0x20
000094  a12d              ADR      r1,|L16.332|
000096  482c              LDR      r0,|L16.328|
000098  f7fffffe          BL       __aeabi_memcpy
;;;315    			memcpy(proKey, XLINK_PRODUCT_KEY, 32);
00009c  2220              MOVS     r2,#0x20
00009e  a134              ADR      r1,|L16.368|
0000a0  4668              MOV      r0,sp
0000a2  f7fffffe          BL       __aeabi_memcpy4
;;;316    			break;
0000a6  e002              B        |L16.174|
                  |L16.168|
0000a8  1c6d              ADDS     r5,r5,#1              ;310
                  |L16.170|
0000aa  2d20              CMP      r5,#0x20              ;310
0000ac  dbe7              BLT      |L16.126|
                  |L16.174|
0000ae  bf00              NOP      
;;;317    		}
;;;318    	}
;;;319    	for (i = 0; i < 32; i++) {
0000b0  2500              MOVS     r5,#0
0000b2  e015              B        |L16.224|
                  |L16.180|
;;;320    		temp = proKey[i];
0000b4  f81d4005          LDRB     r4,[sp,r5]
;;;321    		if (temp <= '9' && temp >= '0') {
0000b8  2c39              CMP      r4,#0x39
0000ba  dc01              BGT      |L16.192|
0000bc  2c30              CMP      r4,#0x30
0000be  da0e              BGE      |L16.222|
                  |L16.192|
;;;322    		} else if (temp > 'f' || temp < 'a') {
0000c0  2c66              CMP      r4,#0x66
0000c2  dc01              BGT      |L16.200|
0000c4  2c61              CMP      r4,#0x61
0000c6  da0a              BGE      |L16.222|
                  |L16.200|
;;;323    			memcpy(m_pID, XLINK_PRODUCT_ID, 32);
0000c8  2220              MOVS     r2,#0x20
0000ca  a120              ADR      r1,|L16.332|
0000cc  481e              LDR      r0,|L16.328|
0000ce  f7fffffe          BL       __aeabi_memcpy
;;;324    			memcpy(proKey, XLINK_PRODUCT_KEY, 32);
0000d2  2220              MOVS     r2,#0x20
0000d4  a126              ADR      r1,|L16.368|
0000d6  4668              MOV      r0,sp
0000d8  f7fffffe          BL       __aeabi_memcpy4
;;;325    			break;
0000dc  e002              B        |L16.228|
                  |L16.222|
0000de  1c6d              ADDS     r5,r5,#1              ;319
                  |L16.224|
0000e0  2d20              CMP      r5,#0x20              ;319
0000e2  dbe7              BLT      |L16.180|
                  |L16.228|
0000e4  bf00              NOP      
;;;326    		}
;;;327    	}
;;;328    
;;;329    	if (XlinkSystemInit(m_pID, proKey, &user_config) == 0) {
0000e6  4a0f              LDR      r2,|L16.292|
0000e8  4669              MOV      r1,sp
0000ea  4817              LDR      r0,|L16.328|
0000ec  f7fffffe          BL       XlinkSystemInit
0000f0  b108              CBZ      r0,|L16.246|
;;;330    	} else {
;;;331    		
;;;332    //		XlinkSystemSetPassword("8888");
;;;333    		XlinkGetServerTime();
0000f2  f7fffffe          BL       XlinkGetServerTime
                  |L16.246|
;;;334    		//XlinkSystemSetWifiStatus(0);
;;;335    	}
;;;336    	
;;;337    	//my datapoint init
;;;338    	mydp.id = 12888;
0000f6  f2432058          MOV      r0,#0x3258
0000fa  4926              LDR      r1,|L16.404|
0000fc  8048              STRH     r0,[r1,#2]
;;;339    	mydp.num = 10000000;
0000fe  4826              LDR      r0,|L16.408|
000100  6048              STR      r0,[r1,#4]  ; mydp
;;;340    	mydp.name = MyName;
000102  4826              LDR      r0,|L16.412|
000104  6800              LDR      r0,[r0,#0]  ; MyName
000106  6088              STR      r0,[r1,#8]  ; mydp
;;;341    	mydp.pressure = 50;
000108  2032              MOVS     r0,#0x32
00010a  7048              STRB     r0,[r1,#1]
;;;342    	mydp.temperature = 123;
00010c  207b              MOVS     r0,#0x7b
00010e  7008              STRB     r0,[r1,#0]
;;;343        
;;;344        XlinkPorcess_UDP_Enable();
000110  f7fffffe          BL       XlinkPorcess_UDP_Enable
;;;345    
;;;346    	//not connect to server
;;;347    	hfgpio_fset_out_high(HFGPIO_F_STATE);
000114  f04f5100          MOV      r1,#0x20000000
000118  2022              MOVS     r0,#0x22
00011a  f7fffffe          BL       hfgpio_configure_fpin
;;;348        
;;;349    }
00011e  b009              ADD      sp,sp,#0x24
000120  bd30              POP      {r4,r5,pc}
;;;350    
                          ENDP

000122  0000              DCW      0x0000
                  |L16.292|
                          DCD      user_config
                  |L16.296|
                          DCD      pipe1_call
                  |L16.300|
                          DCD      udp_pipe_call
                  |L16.304|
                          DCD      app_status
                  |L16.308|
                          DCD      xlink_debug_fn_x
                  |L16.312|
                          DCD      upgrade_task
                  |L16.316|
                          DCD      time_callback
                  |L16.320|
                          DCD      GetAllDataPiont
                  |L16.324|
                          DCD      SetDataPiont
                  |L16.328|
                          DCD      m_pID
                  |L16.332|
00014c  63613336          DCB      "ca36dd09c98e4dab878d503b787c43af",0
000150  64643039
000154  63393865
000158  34646162
00015c  38373864
000160  35303362
000164  37383763
000168  34336166
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L16.368|
000170  32316262          DCB      "21bbc1c21e9d42dd8ddd7d66227b6ac2",0
000174  63316332
000178  31653964
00017c  34326464
000180  38646464
000184  37643636
000188  32323762
00018c  36616332
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0
                  |L16.404|
                          DCD      mydp
                  |L16.408|
                          DCD      0x00989680
                  |L16.412|
                          DCD      MyName

                          AREA ||i.xlink_recv_uart_data||, CODE, READONLY, ALIGN=1

                  xlink_recv_uart_data PROC
;;;83     
;;;84     XLINK_FUNC void xlink_recv_uart_data(unsigned char *data, unsigned int datalen) {
000000  b570              PUSH     {r4-r6,lr}
000002  b09a              SUB      sp,sp,#0x68
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;85     	int ret = 0;
000008  2600              MOVS     r6,#0
;;;86     	if (datalen > 3 && datalen < 100) {
00000a  2c03              CMP      r4,#3
00000c  d91f              BLS      |L17.78|
00000e  2c64              CMP      r4,#0x64
000010  d21d              BCS      |L17.78|
;;;87     		if (data[0] == 'A' && data[1] == 'T' && data[2] == '+') {
000012  7828              LDRB     r0,[r5,#0]
000014  2841              CMP      r0,#0x41
000016  d11a              BNE      |L17.78|
000018  7868              LDRB     r0,[r5,#1]
00001a  2854              CMP      r0,#0x54
00001c  d117              BNE      |L17.78|
00001e  78a8              LDRB     r0,[r5,#2]
000020  282b              CMP      r0,#0x2b
000022  d114              BNE      |L17.78|
;;;88     			unsigned char at_buffer[100];
;;;89     			memset(at_buffer, 0, 100);
000024  2164              MOVS     r1,#0x64
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       __aeabi_memclr4
;;;90     			memcpy(at_buffer, data, datalen);
00002c  4622              MOV      r2,r4
00002e  4629              MOV      r1,r5
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       __aeabi_memcpy
;;;91     			at_buffer[datalen] = '\0';
000036  2000              MOVS     r0,#0
000038  a901              ADD      r1,sp,#4
00003a  5508              STRB     r0,[r1,r4]
;;;92     			ret = xlink_process_at_cmd(at_buffer, datalen);
00003c  4621              MOV      r1,r4
00003e  a801              ADD      r0,sp,#4
000040  f7fffffe          BL       xlink_process_at_cmd
000044  4606              MOV      r6,r0
;;;93     			if (ret != 0) {
000046  b10e              CBZ      r6,|L17.76|
                  |L17.72|
;;;94     				return;
;;;95     			}
;;;96     		}
;;;97     	}
;;;98     	UartBufAddData(data,datalen);
;;;99     }
000048  b01a              ADD      sp,sp,#0x68
00004a  bd70              POP      {r4-r6,pc}
                  |L17.76|
00004c  bf00              NOP                            ;96
                  |L17.78|
00004e  b2a1              UXTH     r1,r4                 ;98
000050  4628              MOV      r0,r5                 ;98
000052  f7fffffe          BL       UartBufAddData
000056  bf00              NOP      
000058  e7f6              B        |L17.72|
;;;100    
                          ENDP


                          AREA ||i.xlink_save_at_config||, CODE, READONLY, ALIGN=2

                  xlink_save_at_config PROC
;;;186    
;;;187    XLINK_FUNC void xlink_save_at_config(void) {
000000  b510              PUSH     {r4,lr}
;;;188    	XlinkWriteAtConfig(&g_atconfig);
000002  4802              LDR      r0,|L18.12|
000004  f7fffffe          BL       XlinkWriteAtConfig
;;;189    }
000008  bd10              POP      {r4,pc}
;;;190    
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      g_atconfig

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  user_config
                          %        92
                  g_atconfig
                          %        14
                  m_pID
                          %        34
                  mydp
                          %        12
                  uartbuf
                          %        2048
                  tcpsendbuf
                          %        1024
                  log_buf
                          %        200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000004  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000008  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00000c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000010  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000014  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000018  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00001c  2a2a6465          DCB      0x2a,0x2a,0x64,0x65
000020  76696365          DCB      0x76,0x69,0x63,0x65
000024  20696420          DCB      0x20,0x69,0x64,0x20
000028  69732025          DCB      0x69,0x73,0x20,0x25
00002c  732a2a2a          DCB      0x73,0x2a,0x2a,0x2a
000030  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000034  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000038  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
00003c  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000040  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000044  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
000048  2a0d0a00          DCB      0x2a,0x0d,0x0a,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  e794b5e9          DCB      231,148,181,233,165,173,233,148,133,"electric cooker",0
000004  a5ade994
000008  85656c65
00000c  63747269
000010  6320636f
000014  6f6b6572
000018  00      

                          AREA ||.data||, DATA, ALIGN=2

                  Isconnectserver
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  MyName
                          DCD      ||.conststring||
                  uartbufhead
000008  0000              DCW      0x0000
                  uartbufwear
00000a  0000              DCW      0x0000
                  tcpsenbuflen
00000c  0000              DCW      0x0000
                  g_AllSta
00000e  00                DCB      0x00
