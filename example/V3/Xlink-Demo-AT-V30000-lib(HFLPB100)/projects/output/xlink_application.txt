; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\xlink_application.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\xlink_application.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I..\sdk\1.50\include -I..\xlink -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\xlink_application.crf ..\src\xlink_Application.c]
                          THUMB

                          AREA ||i.app_init||, CODE, READONLY, ALIGN=2

                  app_init PROC
;;;321    
;;;322    void app_init(void) {
000000  b510              PUSH     {r4,lr}
;;;323    	u_printf("app_init\n");
000002  a102              ADR      r1,|L1.12|
000004  200a              MOVS     r0,#0xa
000006  f7fffffe          BL       HF_Debug
;;;324    }
00000a  bd10              POP      {r4,pc}
;;;325    
                          ENDP

                  |L1.12|
00000c  6170705f          DCB      "app_init\n",0
000010  696e6974
000014  0a00    
000016  00                DCB      0
000017  00                DCB      0

                          AREA ||i.app_main||, CODE, READONLY, ALIGN=2

                  app_main PROC
;;;382    ///main
;;;383    int XLINK_FUNC app_main(void) {
000000  b53e              PUSH     {r1-r5,lr}
;;;384    
;;;385    	//time_t now=time(NULL);
;;;386    //	hfdbg_set_level(DEBUG_LEVEL);
;;;387    	//XlinkUartSend("App start .\r\n", sizeof("App start .\r\n"));
;;;388    	HF_Debug(DEBUG_LEVEL, "sdk version(%s),the app_main start time is %s %s\n", hfsys_get_sdk_version(), __DATE__, __TIME__);
000002  f7fffffe          BL       hfsys_get_sdk_version
000006  4605              MOV      r5,r0
000008  a040              ADR      r0,|L2.268|
00000a  a343              ADR      r3,|L2.280|
00000c  462a              MOV      r2,r5
00000e  a145              ADR      r1,|L2.292|
000010  9000              STR      r0,[sp,#0]
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       HF_Debug
;;;389    
;;;390    	if (hfgpio_fmap_check(module_type) != 0) {
000018  484f              LDR      r0,|L2.344|
00001a  6800              LDR      r0,[r0,#0]  ; module_type
00001c  f7fffffe          BL       hfgpio_fmap_check
000020  b148              CBZ      r0,|L2.54|
;;;391    		while (1) {
000022  e007              B        |L2.52|
                  |L2.36|
;;;392    			HF_Debug(DEBUG_ERROR, "gpio map file error\n");
000024  a14d              ADR      r1,|L2.348|
000026  2008              MOVS     r0,#8
000028  f7fffffe          BL       HF_Debug
;;;393    			msleep(1000);
00002c  f44f707a          MOV      r0,#0x3e8
000030  f7fffffe          BL       hf_thread_delay
                  |L2.52|
000034  e7f6              B        |L2.36|
                  |L2.54|
;;;394    		}
;;;395    		//return 0;
;;;396    	}
;;;397    	
;;;398    	show_reset_reason();
000036  f7fffffe          BL       show_reset_reason
;;;399    
;;;400    	g_AllSta.byte = 0;
00003a  2000              MOVS     r0,#0
00003c  494d              LDR      r1,|L2.372|
00003e  7008              STRB     r0,[r1,#0]
;;;401    	if (hfsys_register_system_event((hfsys_event_callback_t) hfsys_event_callback) != HF_SUCCESS) {
000040  484d              LDR      r0,|L2.376|
000042  f7fffffe          BL       hfsys_register_system_event
000046  b118              CBZ      r0,|L2.80|
;;;402    		u_printf("register system event fail\n");
000048  a14c              ADR      r1,|L2.380|
00004a  200a              MOVS     r0,#0xa
00004c  f7fffffe          BL       HF_Debug
                  |L2.80|
;;;403    	}
;;;404    
;;;405    	while (!hfnet_wifi_is_active()) {
000050  e002              B        |L2.88|
                  |L2.82|
;;;406    		msleep(50);
000052  2032              MOVS     r0,#0x32
000054  f7fffffe          BL       hf_thread_delay
                  |L2.88|
000058  f7fffffe          BL       hfnet_wifi_is_active
00005c  2800              CMP      r0,#0                 ;405
00005e  d0f8              BEQ      |L2.82|
;;;407    		//XlinkUartSend("msleep.\r\n", sizeof("msleep.\r\n"));
;;;408    	}
;;;409    	//XlinkUartSend("hfnet_wifi_is_active.\r\n", sizeof("hfnet_wifi_is_active.\r\n"));
;;;410    #if 1
;;;411    	int up_result=0;
000060  2400              MOVS     r4,#0
;;;412    	up_result = hfupdate_auto_upgrade(0);
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       hfupdate_auto_upgrade
000068  4604              MOV      r4,r0
;;;413    	if(up_result<0)
00006a  2c00              CMP      r4,#0
00006c  da04              BGE      |L2.120|
;;;414    	{
;;;415    		u_printf("no entry the auto upgrade mode\n");
00006e  a14a              ADR      r1,|L2.408|
000070  200a              MOVS     r0,#0xa
000072  f7fffffe          BL       HF_Debug
000076  e00a              B        |L2.142|
                  |L2.120|
;;;416    	}
;;;417    	else if(up_result==0)
000078  b924              CBNZ     r4,|L2.132|
;;;418    	{
;;;419    		u_printf("upgrade success\n");
00007a  a14f              ADR      r1,|L2.440|
00007c  200a              MOVS     r0,#0xa
00007e  f7fffffe          BL       HF_Debug
000082  e004              B        |L2.142|
                  |L2.132|
;;;420    	}
;;;421    	else
;;;422    	{
;;;423    		u_printf("upgrade fail %d\n",up_result);
000084  4622              MOV      r2,r4
000086  a151              ADR      r1,|L2.460|
000088  200a              MOVS     r0,#0xa
00008a  f7fffffe          BL       HF_Debug
                  |L2.142|
;;;424    	}
;;;425    #endif
;;;426    	
;;;427    	if (hfnet_start_assis(ASSIS_PORT) != HF_SUCCESS) {
00008e  f64b7003          MOV      r0,#0xbf03
000092  f7fffffe          BL       hfnet_start_assis
000096  b118              CBZ      r0,|L2.160|
;;;428    		HF_Debug(DEBUG_WARN, "start httpd fail\n");
000098  a151              ADR      r1,|L2.480|
00009a  2008              MOVS     r0,#8
00009c  f7fffffe          BL       HF_Debug
                  |L2.160|
;;;429    	}
;;;430    
;;;431    	if (hfnet_start_httpd(HFTHREAD_PRIORITIES_MID) != HF_SUCCESS) {
0000a0  2002              MOVS     r0,#2
0000a2  f7fffffe          BL       hfnet_start_httpd
0000a6  b118              CBZ      r0,|L2.176|
;;;432    		HF_Debug(DEBUG_WARN, "start httpd fail\n");
0000a8  a14d              ADR      r1,|L2.480|
0000aa  2008              MOVS     r0,#8
0000ac  f7fffffe          BL       HF_Debug
                  |L2.176|
;;;433    	}
;;;434    	
;;;435    	if(hfnet_start_uart(HFTHREAD_PRIORITIES_LOW,(hfnet_callback_t)uart_recv_callback)!=HF_SUCCESS)
0000b0  4950              LDR      r1,|L2.500|
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       hfnet_start_uart
0000b8  b118              CBZ      r0,|L2.194|
;;;436    	{
;;;437    		HF_Debug(DEBUG_WARN,"start uart fail!\n");
0000ba  a14f              ADR      r1,|L2.504|
0000bc  2008              MOVS     r0,#8
0000be  f7fffffe          BL       HF_Debug
                  |L2.194|
;;;438    	}
;;;439    
;;;440    //    XlinkUartSend("system init V1.\r\n", 14);
;;;441    	hfthread_create(work_phtread, "xlink_loop", 1024, NULL, HFTHREAD_PRIORITIES_NORMAL, NULL, NULL );
0000c2  2000              MOVS     r0,#0
0000c4  2203              MOVS     r2,#3
0000c6  e9cd2000          STRD     r2,r0,[sp,#0]
0000ca  4603              MOV      r3,r0
0000cc  f44f6280          MOV      r2,#0x400
0000d0  a14e              ADR      r1,|L2.524|
0000d2  9002              STR      r0,[sp,#8]
0000d4  4850              LDR      r0,|L2.536|
0000d6  f7fffffe          BL       hfthread_create
;;;442    	hfthread_create(work_phtread_tcp_client, "xlink_loop_tcp", 128, NULL, HFTHREAD_PRIORITIES_NORMAL, NULL, NULL );
0000da  2000              MOVS     r0,#0
0000dc  2203              MOVS     r2,#3
0000de  e9cd2000          STRD     r2,r0,[sp,#0]
0000e2  4603              MOV      r3,r0
0000e4  2280              MOVS     r2,#0x80
0000e6  a14d              ADR      r1,|L2.540|
0000e8  9002              STR      r0,[sp,#8]
0000ea  4850              LDR      r0,|L2.556|
0000ec  f7fffffe          BL       hfthread_create
;;;443    #ifndef __LPT200__
;;;444    	hfthread_create(airkiss_domain_lop, "airkiss_domain_lop", 512, NULL, HFTHREAD_PRIORITIES_NORMAL, NULL, NULL );
0000f0  2000              MOVS     r0,#0
0000f2  2203              MOVS     r2,#3
0000f4  e9cd2000          STRD     r2,r0,[sp,#0]
0000f8  4603              MOV      r3,r0
0000fa  f44f7200          MOV      r2,#0x200
0000fe  a14c              ADR      r1,|L2.560|
000100  9002              STR      r0,[sp,#8]
000102  4850              LDR      r0,|L2.580|
000104  f7fffffe          BL       hfthread_create
;;;445    #endif
;;;446    	return 1;
000108  2001              MOVS     r0,#1
;;;447    }
00010a  bd3e              POP      {r1-r5,pc}
;;;448    
                          ENDP

                  |L2.268|
00010c  31363a33          DCB      "16:34:05",0
000110  343a3035
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L2.280|
000118  41756720          DCB      "Aug  8 2016",0
00011c  20382032
000120  30313600
                  |L2.292|
000124  73646b20          DCB      "sdk version(%s),the app_main start time is %s %s\n",0
000128  76657273
00012c  696f6e28
000130  2573292c
000134  74686520
000138  6170705f
00013c  6d61696e
000140  20737461
000144  72742074
000148  696d6520
00014c  69732025
000150  73202573
000154  0a00    
000156  00                DCB      0
000157  00                DCB      0
                  |L2.344|
                          DCD      module_type
                  |L2.348|
00015c  6770696f          DCB      "gpio map file error\n",0
000160  206d6170
000164  2066696c
000168  65206572
00016c  726f720a
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L2.372|
                          DCD      g_AllSta
                  |L2.376|
                          DCD      hfsys_event_callback
                  |L2.380|
00017c  72656769          DCB      "register system event fail\n",0
000180  73746572
000184  20737973
000188  74656d20
00018c  6576656e
000190  74206661
000194  696c0a00
                  |L2.408|
000198  6e6f2065          DCB      "no entry the auto upgrade mode\n",0
00019c  6e747279
0001a0  20746865
0001a4  20617574
0001a8  6f207570
0001ac  67726164
0001b0  65206d6f
0001b4  64650a00
                  |L2.440|
0001b8  75706772          DCB      "upgrade success\n",0
0001bc  61646520
0001c0  73756363
0001c4  6573730a
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L2.460|
0001cc  75706772          DCB      "upgrade fail %d\n",0
0001d0  61646520
0001d4  6661696c
0001d8  2025640a
0001dc  00      
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0
                  |L2.480|
0001e0  73746172          DCB      "start httpd fail\n",0
0001e4  74206874
0001e8  74706420
0001ec  6661696c
0001f0  0a00    
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L2.500|
                          DCD      uart_recv_callback
                  |L2.504|
0001f8  73746172          DCB      "start uart fail!\n",0
0001fc  74207561
000200  72742066
000204  61696c21
000208  0a00    
00020a  00                DCB      0
00020b  00                DCB      0
                  |L2.524|
00020c  786c696e          DCB      "xlink_loop",0
000210  6b5f6c6f
000214  6f7000  
000217  00                DCB      0
                  |L2.536|
                          DCD      work_phtread
                  |L2.540|
00021c  786c696e          DCB      "xlink_loop_tcp",0
000220  6b5f6c6f
000224  6f705f74
000228  637000  
00022b  00                DCB      0
                  |L2.556|
                          DCD      work_phtread_tcp_client
                  |L2.560|
000230  6169726b          DCB      "airkiss_domain_lop",0
000234  6973735f
000238  646f6d61
00023c  696e5f6c
000240  6f7000  
000243  00                DCB      0
                  |L2.580|
                          DCD      airkiss_domain_lop

                          AREA ||i.hfsys_event_callback||, CODE, READONLY, ALIGN=2

                  hfsys_event_callback PROC
;;;344    
;;;345    static int hfsys_event_callback(uint32_t event_id, void * param) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;346    	int ret = 0;
000006  2500              MOVS     r5,#0
;;;347    	switch (event_id) {
000008  2c05              CMP      r4,#5
00000a  d233              BCS      |L3.116|
00000c  e8dff004          TBB      [pc,r4]
000010  03142d24          DCB      0x03,0x14,0x2d,0x24
000014  2800              DCB      0x28,0x00
;;;348    	case HFE_WIFI_STA_CONNECTED:
;;;349    		u_printf("wifi sta connected!!\n");
000016  a119              ADR      r1,|L3.124|
000018  200a              MOVS     r0,#0xa
00001a  f7fffffe          BL       HF_Debug
;;;350    		g_AllSta.bit.isConnectWIFI = 1;
00001e  481d              LDR      r0,|L3.148|
000020  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000022  f0200002          BIC      r0,r0,#2
000026  1c80              ADDS     r0,r0,#2
000028  491a              LDR      r1,|L3.148|
00002a  7008              STRB     r0,[r1,#0]
;;;351    		xlink_send_uart_sta();
00002c  f7fffffe          BL       xlink_send_uart_sta
;;;352    		XlinkSystemSetWifiStatus(1);
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       XlinkSystemSetWifiStatus
;;;353    		break;
000036  e01e              B        |L3.118|
;;;354    	case HFE_WIFI_STA_DISCONNECTED:
;;;355    		u_printf("wifi sta disconnected!!\n");
000038  a117              ADR      r1,|L3.152|
00003a  200a              MOVS     r0,#0xa
00003c  f7fffffe          BL       HF_Debug
;;;356    		g_AllSta.bit.isConnectWIFI = 0;
000040  4814              LDR      r0,|L3.148|
000042  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000044  f0200002          BIC      r0,r0,#2
000048  4912              LDR      r1,|L3.148|
00004a  7008              STRB     r0,[r1,#0]
;;;357    		xlink_send_uart_sta();
00004c  f7fffffe          BL       xlink_send_uart_sta
;;;358    	  XlinkSystemSetWifiStatus(0);
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       XlinkSystemSetWifiStatus
;;;359    		break;
000056  e00e              B        |L3.118|
;;;360    	case HFE_DHCP_OK:
;;;361    		XlinkSystemSetWifiStatus(1);
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       XlinkSystemSetWifiStatus
;;;362    		break;
00005e  e00a              B        |L3.118|
;;;363    	case HFE_SMTLK_OK:
;;;364    		u_printf("smtlk ok!\n");
000060  a114              ADR      r1,|L3.180|
000062  200a              MOVS     r0,#0xa
000064  f7fffffe          BL       HF_Debug
;;;365    		break;
000068  e005              B        |L3.118|
;;;366    	case HFE_CONFIG_RELOAD:
;;;367    		u_printf("reload!\n");
00006a  a115              ADR      r1,|L3.192|
00006c  200a              MOVS     r0,#0xa
00006e  f7fffffe          BL       HF_Debug
;;;368    		break;
000072  e000              B        |L3.118|
                  |L3.116|
;;;369    	default:
;;;370    		break;
000074  bf00              NOP      
                  |L3.118|
000076  bf00              NOP                            ;353
;;;371    	}
;;;372    	return ret;
000078  4628              MOV      r0,r5
;;;373    }
00007a  bd70              POP      {r4-r6,pc}
;;;374    
                          ENDP

                  |L3.124|
00007c  77696669          DCB      "wifi sta connected!!\n",0
000080  20737461
000084  20636f6e
000088  6e656374
00008c  65642121
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L3.148|
                          DCD      g_AllSta
                  |L3.152|
000098  77696669          DCB      "wifi sta disconnected!!\n",0
00009c  20737461
0000a0  20646973
0000a4  636f6e6e
0000a8  65637465
0000ac  6421210a
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L3.180|
0000b4  736d746c          DCB      "smtlk ok!\n",0
0000b8  6b206f6b
0000bc  210a00  
0000bf  00                DCB      0
                  |L3.192|
0000c0  72656c6f          DCB      "reload!\n",0
0000c4  6164210a
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.show_reset_reason||, CODE, READONLY, ALIGN=2

                  show_reset_reason PROC
;;;276    
;;;277    static void show_reset_reason(void) {
000000  b510              PUSH     {r4,lr}
;;;278    	uint32_t reset_reason = 0;
000002  2400              MOVS     r4,#0
;;;279    
;;;280    	reset_reason = hfsys_get_reset_reason();
000004  f7fffffe          BL       hfsys_get_reset_reason
000008  4604              MOV      r4,r0
;;;281    
;;;282    #if 1
;;;283    	u_printf("reset_reasion:%08x\n", reset_reason);
00000a  4622              MOV      r2,r4
00000c  a102              ADR      r1,|L4.24|
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       HF_Debug
;;;284    #else	
;;;285    	if(reset_reason&HFSYS_RESET_REASON_ERESET)
;;;286    	{
;;;287    		u_printf("ERESET\n");
;;;288    	}
;;;289    	if(reset_reason&HFSYS_RESET_REASON_IRESET0)
;;;290    	{
;;;291    		u_printf("IRESET0\n");
;;;292    	}
;;;293    	if(reset_reason&HFSYS_RESET_REASON_IRESET1)
;;;294    	{
;;;295    		u_printf("IRESET1\n");
;;;296    	}
;;;297    	if(reset_reason==HFSYS_RESET_REASON_NORMAL)
;;;298    	{
;;;299    		u_printf("RESET NORMAL\n");
;;;300    	}
;;;301    	if(reset_reason&HFSYS_RESET_REASON_WPS)
;;;302    	{
;;;303    		u_printf("RESET FOR WPS\n");
;;;304    	}
;;;305    	if(reset_reason&HFSYS_RESET_REASON_SMARTLINK_START)
;;;306    	{
;;;307    		u_printf("RESET FOR SMARTLINK START\n");
;;;308    	}
;;;309    	if(reset_reason&HFSYS_RESET_REASON_SMARTLINK_OK)
;;;310    	{
;;;311    		u_printf("RESET FOR SMARTLINK OK\n");
;;;312    	}
;;;313    	if(reset_reason&HFSYS_RESET_REASON_WPS_OK)
;;;314    	{
;;;315    		u_printf("RESET FOR WPS OK\n");
;;;316    	}
;;;317    #endif
;;;318    
;;;319    	return;
;;;320    }
000014  bd10              POP      {r4,pc}
;;;321    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
000018  72657365          DCB      "reset_reasion:%08x\n",0
00001c  745f7265
000020  6173696f
000024  6e3a2530
000028  38780a00

                          AREA ||i.uart_recv_callback||, CODE, READONLY, ALIGN=2

                  uart_recv_callback PROC
;;;374    
;;;375    static int USER_FUNC uart_recv_callback(uint32_t event,char *data,uint32_t len,uint32_t buf_len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;376    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
000008  461f              MOV      r7,r3
;;;377    	HF_Debug(DEBUG_LEVEL_LOW,"[%d]uart recv %d bytes data %d\n",event,len,buf_len);
00000a  4623              MOV      r3,r4
00000c  462a              MOV      r2,r5
00000e  a105              ADR      r1,|L5.36|
000010  2001              MOVS     r0,#1
000012  9700              STR      r7,[sp,#0]
000014  f7fffffe          BL       HF_Debug
;;;378    	xlink_recv_uart_data((unsigned char *)data,len);
000018  4621              MOV      r1,r4
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       xlink_recv_uart_data
;;;379    	return len;
000020  4620              MOV      r0,r4
;;;380    }
000022  bdf8              POP      {r3-r7,pc}
;;;381    
                          ENDP

                  |L5.36|
000024  5b25645d          DCB      "[%d]uart recv %d bytes data %d\n",0
000028  75617274
00002c  20726563
000030  76202564
000034  20627974
000038  65732064
00003c  61746120
000040  25640a00

                          AREA ||i.work_phtread||, CODE, READONLY, ALIGN=1

                  work_phtread PROC
;;;325    
;;;326    XLINK_FUNC void work_phtread(void *args) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;327    	int ret = xlink_demo_init();
000004  f7fffffe          BL       xlink_demo_init
000008  4604              MOV      r4,r0
;;;328    	if (ret == 0) {
00000a  b92c              CBNZ     r4,|L6.24|
;;;329    		while (1) {
00000c  e003              B        |L6.22|
                  |L6.14|
;;;330    			msleep(1000);
00000e  f44f707a          MOV      r0,#0x3e8
000012  f7fffffe          BL       hf_thread_delay
                  |L6.22|
000016  e7fa              B        |L6.14|
                  |L6.24|
;;;331    		}
;;;332    	}
;;;333    	xlink_demo_loop();
000018  f7fffffe          BL       xlink_demo_loop
;;;334    }
00001c  bd70              POP      {r4-r6,pc}
;;;335    
                          ENDP


                          AREA ||i.work_phtread_tcp_client||, CODE, READONLY, ALIGN=1

                  work_phtread_tcp_client PROC
;;;335    
;;;336    XLINK_FUNC void work_phtread_tcp_client(void *args) {
000000  e005              B        |L7.14|
                  |L7.2|
;;;337    	
;;;338    	while(1){
;;;339    			XlinkSystemTcpLoop();
000002  f7fffffe          BL       XlinkSystemTcpLoop
;;;340    			msleep(2*1000);
000006  f44f60fa          MOV      r0,#0x7d0
00000a  f7fffffe          BL       hf_thread_delay
                  |L7.14|
00000e  e7f8              B        |L7.2|
;;;341    	}
;;;342    }
;;;343    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  hf_gpio_fid_to_pid_map_table
                          DCD      0x00080002
                          DCD      0x00080003
                          DCD      0x00080004
                          DCD      0x00080005
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x008b0027
                          DCD      0x00000000
                          DCD      0x008b0029
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x02830008
                          DCD      0x00000000
                          DCD      0x0083002b
                          DCD      0x0083002c
                          DCD      0x0083002d
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01830012
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          %        228
                  user_define_at_cmds_table
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  module_type
                          DCD      0x00000000
