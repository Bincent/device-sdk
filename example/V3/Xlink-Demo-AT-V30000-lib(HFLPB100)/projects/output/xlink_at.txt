; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\xlink_at.o --asm_dir=.\output\ --list_dir=.\output\ --depend=.\output\xlink_at.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=494 -I..\sdk\1.50\include -I..\xlink -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -D__KEIL_MDK__ -D__LPB100__ --enum_is_int --omf_browse=.\output\xlink_at.crf ..\src\xlink_at.c]
                          THUMB

                          AREA ||i.hex_to_string||, CODE, READONLY, ALIGN=1

                  hex_to_string PROC
;;;256    }
;;;257    void hex_to_string(char *string, unsigned char *mac) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  460d              MOV      r5,r1
;;;258    	signed char hig = 0;
000004  2200              MOVS     r2,#0
;;;259    	signed char low = 0;
000006  2300              MOVS     r3,#0
;;;260    	unsigned char iter = 0;
000008  2400              MOVS     r4,#0
;;;261    	unsigned char index = 0;
00000a  2100              MOVS     r1,#0
;;;262    	for (iter = 0; iter < 6; iter++) {
00000c  bf00              NOP      
00000e  e034              B        |L1.122|
                  |L1.16|
;;;263    		hig = (mac[iter] & 0xf0) >> 4;
000010  5d2e              LDRB     r6,[r5,r4]
000012  0932              LSRS     r2,r6,#4
;;;264    		low = (mac[iter] & 0x0f);
000014  5d2e              LDRB     r6,[r5,r4]
000016  f006030f          AND      r3,r6,#0xf
;;;265    		if (0 <= hig && hig <= 9) {
00001a  2a00              CMP      r2,#0
00001c  db0b              BLT      |L1.54|
00001e  2a09              CMP      r2,#9
000020  dc09              BGT      |L1.54|
;;;266    			string[index++] = hig + '0';
000022  f1020630          ADD      r6,r2,#0x30
000026  f0060cff          AND      r12,r6,#0xff
00002a  460e              MOV      r6,r1
00002c  1c4f              ADDS     r7,r1,#1
00002e  b2f9              UXTB     r1,r7
000030  f800c006          STRB     r12,[r0,r6]
000034  e008              B        |L1.72|
                  |L1.54|
;;;267    		} else {
;;;268    			string[index++] = hig - 10 + 'A';
000036  f1020637          ADD      r6,r2,#0x37
00003a  f0060cff          AND      r12,r6,#0xff
00003e  460e              MOV      r6,r1
000040  1c4f              ADDS     r7,r1,#1
000042  b2f9              UXTB     r1,r7
000044  f800c006          STRB     r12,[r0,r6]
                  |L1.72|
;;;269    		}
;;;270    		if (0 <= low && low <= 9) {
000048  2b00              CMP      r3,#0
00004a  db0b              BLT      |L1.100|
00004c  2b09              CMP      r3,#9
00004e  dc09              BGT      |L1.100|
;;;271    			string[index++] = low + '0';
000050  f1030630          ADD      r6,r3,#0x30
000054  f0060cff          AND      r12,r6,#0xff
000058  460e              MOV      r6,r1
00005a  1c4f              ADDS     r7,r1,#1
00005c  b2f9              UXTB     r1,r7
00005e  f800c006          STRB     r12,[r0,r6]
000062  e008              B        |L1.118|
                  |L1.100|
;;;272    		} else {
;;;273    			string[index++] = low - 10 + 'A';
000064  f1030637          ADD      r6,r3,#0x37
000068  f0060cff          AND      r12,r6,#0xff
00006c  460e              MOV      r6,r1
00006e  1c4f              ADDS     r7,r1,#1
000070  b2f9              UXTB     r1,r7
000072  f800c006          STRB     r12,[r0,r6]
                  |L1.118|
000076  1c66              ADDS     r6,r4,#1              ;262
000078  b2f4              UXTB     r4,r6                 ;262
                  |L1.122|
00007a  2c06              CMP      r4,#6                 ;262
00007c  dbc8              BLT      |L1.16|
;;;274    		}
;;;275    	}
;;;276    	string[index] = '\0';
00007e  2600              MOVS     r6,#0
000080  5446              STRB     r6,[r0,r1]
;;;277    }
000082  bdf0              POP      {r4-r7,pc}
;;;278    //AT+GETMAC#
                          ENDP


                          AREA ||i.process_at_debug||, CODE, READONLY, ALIGN=2

                  process_at_debug PROC
;;;324    
;;;325    static int process_at_debug(int argc, char **argv) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;326    	char *cmdS = NULL;
00000a  2600              MOVS     r6,#0
;;;327    	char *retBuf = NULL;
00000c  2700              MOVS     r7,#0
;;;328    	int len = 0;
00000e  46b0              MOV      r8,r6
;;;329    	if (argc == 2) {
000010  2d02              CMP      r5,#2
000012  d125              BNE      |L2.96|
;;;330    		if (strncmp(argv[1], "ON", 2) == 0) {
000014  2202              MOVS     r2,#2
000016  a119              ADR      r1,|L2.124|
000018  6860              LDR      r0,[r4,#4]
00001a  f7fffffe          BL       strncmp
00001e  b960              CBNZ     r0,|L2.58|
;;;331    			char buf[20];
;;;332    			cmdS = "AT+NDBGL=1\r\n";
000020  a617              ADR      r6,|L2.128|
;;;333    			hfat_send_cmd(cmdS, xlink_strlen(cmdS), buf, 20);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       strlen
000028  4681              MOV      r9,r0
00002a  2314              MOVS     r3,#0x14
00002c  466a              MOV      r2,sp
00002e  4649              MOV      r1,r9
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       hfat_send_cmd
;;;334    			retBuf = "AT+RETDEBUG=OK\r\n";
000036  a716              ADR      r7,|L2.144|
;;;335    		} else if (strncmp(argv[1], "OFF", 3) == 0) {
000038  e013              B        |L2.98|
                  |L2.58|
00003a  2203              MOVS     r2,#3
00003c  a119              ADR      r1,|L2.164|
00003e  6860              LDR      r0,[r4,#4]
000040  f7fffffe          BL       strncmp
000044  b968              CBNZ     r0,|L2.98|
;;;336    			char buf[20];
;;;337    			cmdS = "AT+NDBGL=0\r\n";
000046  a618              ADR      r6,|L2.168|
;;;338    			hfat_send_cmd(cmdS, xlink_strlen(cmdS), buf, 20);
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       strlen
00004e  4681              MOV      r9,r0
000050  2314              MOVS     r3,#0x14
000052  466a              MOV      r2,sp
000054  4649              MOV      r1,r9
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       hfat_send_cmd
;;;339    			retBuf = "AT+RETDEBUG=OK\r\n";
00005c  a70c              ADR      r7,|L2.144|
;;;340    		}
00005e  e000              B        |L2.98|
                  |L2.96|
;;;341    	} else {
;;;342    		retBuf = "AT+RETDEBUG=ERROR\r\n";
000060  a715              ADR      r7,|L2.184|
                  |L2.98|
;;;343    	}
;;;344    	len = xlink_strlen(retBuf);
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       strlen
000068  4680              MOV      r8,r0
;;;345    	XlinkUartSend((unsigned char *) retBuf, len);
00006a  fa1ff188          UXTH     r1,r8
00006e  4638              MOV      r0,r7
000070  f7fffffe          BL       XlinkUartSend
;;;346    	return __X_AT_OK__;
000074  2005              MOVS     r0,#5
;;;347    }
000076  b005              ADD      sp,sp,#0x14
000078  e8bd83f0          POP      {r4-r9,pc}
;;;348    
                          ENDP

                  |L2.124|
00007c  4f4e00            DCB      "ON",0
00007f  00                DCB      0
                  |L2.128|
000080  41542b4e          DCB      "AT+NDBGL=1\r\n",0
000084  4442474c
000088  3d310d0a
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L2.144|
000090  41542b52          DCB      "AT+RETDEBUG=OK\r\n",0
000094  45544445
000098  4255473d
00009c  4f4b0d0a
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L2.164|
0000a4  4f464600          DCB      "OFF",0
                  |L2.168|
0000a8  41542b4e          DCB      "AT+NDBGL=0\r\n",0
0000ac  4442474c
0000b0  3d300d0a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L2.184|
0000b8  41542b52          DCB      "AT+RETDEBUG=ERROR\r\n",0
0000bc  45544445
0000c0  4255473d
0000c4  4552524f
0000c8  520d0a00

                          AREA ||i.process_at_getStatus||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  process_at_getStatus PROC
;;;238    
;;;239    static int process_at_getStatus(int argc, char **argv) {
000000  b570              PUSH     {r4-r6,lr}
000002  b088              SUB      sp,sp,#0x20
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;240    	unsigned char retBuffer[25] = { 0x00 };
000008  211c              MOVS     r1,#0x1c
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;241    
;;;242    	int retlen = sprintf((char*) retBuffer, "AT+RETSTA=%d,%d\r\n", g_AllSta.bit.isConnectWIFI, g_AllSta.bit.isConnectedServer);
000010  4809              LDR      r0,|L3.56|
000012  7800              LDRB     r0,[r0,#0]  ; g_AllSta
000014  f0000301          AND      r3,r0,#1
000018  4807              LDR      r0,|L3.56|
00001a  7800              LDRB     r0,[r0,#0]  ; g_AllSta
00001c  f3c00240          UBFX     r2,r0,#1,#1
000020  a106              ADR      r1,|L3.60|
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       __2sprintf
000028  4604              MOV      r4,r0
;;;243    
;;;244    	XlinkUartSend(retBuffer, retlen);
00002a  b2a1              UXTH     r1,r4
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       XlinkUartSend
;;;245    
;;;246    	return __X_AT_OK__;
000032  2005              MOVS     r0,#5
;;;247    }
000034  b008              ADD      sp,sp,#0x20
000036  bd70              POP      {r4-r6,pc}
;;;248    
                          ENDP

                  |L3.56|
                          DCD      g_AllSta
                  |L3.60|
00003c  41542b52          DCB      "AT+RETSTA=%d,%d\r\n",0
000040  45545354
000044  413d2564
000048  2c25640d
00004c  0a00    
00004e  00                DCB      0
00004f  00                DCB      0

                          AREA ||i.process_at_getTime||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  process_at_getTime PROC
;;;348    
;;;349    static int process_at_getTime(int argc, char **argv) {
000000  b570              PUSH     {r4-r6,lr}
000002  b096              SUB      sp,sp,#0x58
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;350    	unsigned char retBuffer[50] = { 0x00 };
000008  2134              MOVS     r1,#0x34
00000a  a809              ADD      r0,sp,#0x24
00000c  f7fffffe          BL       __aeabi_memclr4
;;;351    	XLINK_SYS_TIME m_c_time;
;;;352    	int ret = XlinkGetSystemTime(&m_c_time);
000010  a806              ADD      r0,sp,#0x18
000012  f7fffffe          BL       XlinkGetSystemTime
000016  4604              MOV      r4,r0
;;;353    	ret = sprintf((char*)retBuffer, "AT+RETTIME=%04d-%02d-%02d %01d %02d:%02d:%02d %04d\r\n", m_c_time.year, m_c_time.mon, m_c_time.day, m_c_time.week, m_c_time.hour, m_c_time.min, m_c_time.sec,
000018  f9bd0020          LDRSH    r0,[sp,#0x20]
00001c  f89d101f          LDRB     r1,[sp,#0x1f]
000020  f89d201e          LDRB     r2,[sp,#0x1e]
000024  f89d301d          LDRB     r3,[sp,#0x1d]
000028  e9cd3202          STRD     r3,r2,[sp,#8]
00002c  e9cd1004          STRD     r1,r0,[sp,#0x10]
000030  f89d001c          LDRB     r0,[sp,#0x1c]
000034  f89d101b          LDRB     r1,[sp,#0x1b]
000038  e9cd1000          STRD     r1,r0,[sp,#0]
00003c  f89d301a          LDRB     r3,[sp,#0x1a]
000040  f8bd2018          LDRH     r2,[sp,#0x18]
000044  a105              ADR      r1,|L4.92|
000046  a809              ADD      r0,sp,#0x24
000048  f7fffffe          BL       __2sprintf
00004c  4604              MOV      r4,r0
;;;354    			m_c_time.zones);
;;;355    	XlinkUartSend((unsigned char *) retBuffer, ret);
00004e  b2a1              UXTH     r1,r4
000050  a809              ADD      r0,sp,#0x24
000052  f7fffffe          BL       XlinkUartSend
;;;356    	return __X_AT_OK__;
000056  2005              MOVS     r0,#5
;;;357    }
000058  b016              ADD      sp,sp,#0x58
00005a  bd70              POP      {r4-r6,pc}
;;;358    
                          ENDP

                  |L4.92|
00005c  41542b52          DCB      "AT+RETTIME=%04d-%02d-%02d %01d %02d:%02d:%02d %04d\r\n",0
000060  45545449
000064  4d453d25
000068  3034642d
00006c  25303264
000070  2d253032
000074  64202530
000078  31642025
00007c  3032643a
000080  25303264
000084  3a253032
000088  64202530
00008c  34640d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.process_at_getid||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  process_at_getid PROC
;;;249    //AT+GETID#
;;;250    static int process_at_getid(int argc, char **argv) {
000000  b570              PUSH     {r4-r6,lr}
000002  b08e              SUB      sp,sp,#0x38
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;251    	unsigned char retBuffer[50] = { 0x00 };
000008  2134              MOVS     r1,#0x34
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memclr4
;;;252    	extern char m_pID[33];
;;;253    	int len = sprintf((char*) retBuffer, "AT+RETID=%s\r\n", m_pID);
000010  4a06              LDR      r2,|L5.44|
000012  a107              ADR      r1,|L5.48|
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       __2sprintf
00001a  4604              MOV      r4,r0
;;;254    	XlinkUartSend(retBuffer, len);
00001c  b2a1              UXTH     r1,r4
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       XlinkUartSend
;;;255    	return __X_AT_OK__;
000024  2005              MOVS     r0,#5
;;;256    }
000026  b00e              ADD      sp,sp,#0x38
000028  bd70              POP      {r4-r6,pc}
;;;257    void hex_to_string(char *string, unsigned char *mac) {
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      m_pID
                  |L5.48|
000030  41542b52          DCB      "AT+RETID=%s\r\n",0
000034  45544944
000038  3d25730d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.process_at_getmac||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  process_at_getmac PROC
;;;278    //AT+GETMAC#
;;;279    static int process_at_getmac(int argc, char **argv) {
000000  b570              PUSH     {r4-r6,lr}
000002  b08c              SUB      sp,sp,#0x30
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;280    	char retBuffer[25] = { 0x00 };
000008  211c              MOVS     r1,#0x1c
00000a  a805              ADD      r0,sp,#0x14
00000c  f7fffffe          BL       __aeabi_memclr4
;;;281    	int retLength = sprintf(retBuffer, "AT+RETMAC=%02X%02X%02X%02X%02X%02X\r\n", user_config.mac[0], user_config.mac[1], user_config.mac[2], user_config.mac[3], user_config.mac[4],
000010  4810              LDR      r0,|L6.84|
000012  f8900035          LDRB     r0,[r0,#0x35]
000016  490f              LDR      r1,|L6.84|
000018  f8911034          LDRB     r1,[r1,#0x34]
00001c  4a0d              LDR      r2,|L6.84|
00001e  f8922033          LDRB     r2,[r2,#0x33]
000022  4b0c              LDR      r3,|L6.84|
000024  f8933032          LDRB     r3,[r3,#0x32]
000028  e9cd3200          STRD     r3,r2,[sp,#0]
00002c  e9cd1002          STRD     r1,r0,[sp,#8]
000030  4808              LDR      r0,|L6.84|
000032  f8903031          LDRB     r3,[r0,#0x31]
000036  f8902030          LDRB     r2,[r0,#0x30]  ; user_config
00003a  a107              ADR      r1,|L6.88|
00003c  a805              ADD      r0,sp,#0x14
00003e  f7fffffe          BL       __2sprintf
000042  4604              MOV      r4,r0
;;;282    			user_config.mac[5]);
;;;283    	XlinkUartSend((unsigned char*) retBuffer, retLength);
000044  b2a1              UXTH     r1,r4
000046  a805              ADD      r0,sp,#0x14
000048  f7fffffe          BL       XlinkUartSend
;;;284    	return __X_AT_OK__;
00004c  2005              MOVS     r0,#5
;;;285    }
00004e  b00c              ADD      sp,sp,#0x30
000050  bd70              POP      {r4-r6,pc}
;;;286    
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      user_config
                  |L6.88|
000058  41542b52          DCB      "AT+RETMAC=%02X%02X%02X%02X%02X%02X\r\n",0
00005c  45544d41
000060  433d2530
000064  32582530
000068  32582530
00006c  32582530
000070  32582530
000074  32582530
000078  32580d0a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.process_at_help||, CODE, READONLY, ALIGN=2

                  process_at_help PROC
;;;138    
;;;139    static int process_at_help(int argc, char **argv) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
;;;140    	int index = 0;
000008  2400              MOVS     r4,#0
;;;141    	char *help = "\r\n\r\n------------xlink AT help---------\r\n\r\n";
00000a  a518              ADR      r5,|L7.108|
;;;142    	XlinkUartSend((unsigned char*) help, strlen(help));
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       strlen
000012  b286              UXTH     r6,r0
000014  4631              MOV      r1,r6
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       XlinkUartSend
;;;143    	for (; xlink_at_table[index].name != NULL ; index++) {
00001c  e012              B        |L7.68|
                  |L7.30|
;;;144    		XlinkUartSend((unsigned char*) xlink_at_table[index].doc, strlen(xlink_at_table[index].doc));
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a1d              LDR      r2,|L7.152|
000024  eb020181          ADD      r1,r2,r1,LSL #2
000028  6888              LDR      r0,[r1,#8]
00002a  f7fffffe          BL       strlen
00002e  b286              UXTH     r6,r0
000030  eb040144          ADD      r1,r4,r4,LSL #1
000034  4a18              LDR      r2,|L7.152|
000036  eb020181          ADD      r1,r2,r1,LSL #2
00003a  6888              LDR      r0,[r1,#8]
00003c  4631              MOV      r1,r6
00003e  f7fffffe          BL       XlinkUartSend
000042  1c64              ADDS     r4,r4,#1              ;143
                  |L7.68|
000044  eb040044          ADD      r0,r4,r4,LSL #1       ;143
000048  4913              LDR      r1,|L7.152|
00004a  f8510020          LDR      r0,[r1,r0,LSL #2]     ;143
00004e  2800              CMP      r0,#0                 ;143
000050  d1e5              BNE      |L7.30|
;;;145    	}
;;;146    	help = "\r\n\r\n------------xlink AT help END---------\r\n\r\n";
000052  a512              ADR      r5,|L7.156|
;;;147    	XlinkUartSend((unsigned char*) help, strlen(help));
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       strlen
00005a  b286              UXTH     r6,r0
00005c  4631              MOV      r1,r6
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       XlinkUartSend
;;;148    
;;;149    	return __X_AT_OK__;
000064  2005              MOVS     r0,#5
;;;150    }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;151    
                          ENDP

00006a  0000              DCW      0x0000
                  |L7.108|
00006c  0d0a0d0a          DCB      "\r\n\r\n------------xlink AT help---------\r\n\r\n",0
000070  2d2d2d2d
000074  2d2d2d2d
000078  2d2d2d2d
00007c  786c696e
000080  6b204154
000084  2068656c
000088  702d2d2d
00008c  2d2d2d2d
000090  2d2d0d0a
000094  0d0a00  
000097  00                DCB      0
                  |L7.152|
                          DCD      xlink_at_table
                  |L7.156|
00009c  0d0a0d0a          DCB      "\r\n\r\n------------xlink AT help END---------\r\n\r\n",0
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d2d2d
0000ac  786c696e
0000b0  6b204154
0000b4  2068656c
0000b8  7020454e
0000bc  442d2d2d
0000c0  2d2d2d2d
0000c4  2d2d0d0a
0000c8  0d0a00  
0000cb  00                DCB      0

                          AREA ||i.process_at_reboot||, CODE, READONLY, ALIGN=1

                  process_at_reboot PROC
;;;151    
;;;152    static int process_at_reboot(int argc, char **argv) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;153    	hfsys_reset();
000006  f7fffffe          BL       hfsys_reset
;;;154    	return __X_AT_OK__;
00000a  2005              MOVS     r0,#5
;;;155    }
00000c  bd70              POP      {r4-r6,pc}
;;;156    static int process_at_setidkey(int argc, char **argv) {
                          ENDP


                          AREA ||i.process_at_repass||, CODE, READONLY, ALIGN=2

                  process_at_repass PROC
;;;224    //重置密码
;;;225    static int process_at_repass(int argc, char **argv) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;226    	char *retBuffer = NULL;
000008  2400              MOVS     r4,#0
;;;227    	int len = 0;
00000a  2500              MOVS     r5,#0
;;;228        
;;;229        XlinkReSetSDK();
00000c  f7fffffe          BL       XlinkReSetSDK
;;;230        
;;;231    	retBuffer = "AT+RETPASS=OK\r\n";
000010  a406              ADR      r4,|L9.44|
;;;232    	len = strlen(retBuffer);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       strlen
000018  4605              MOV      r5,r0
;;;233    	XlinkUartSend((unsigned char *) retBuffer, len);
00001a  b2a9              UXTH     r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       XlinkUartSend
;;;234        
;;;235        hfsys_reset();
000022  f7fffffe          BL       hfsys_reset
;;;236    	return __X_AT_OK__;
000026  2005              MOVS     r0,#5
;;;237    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;238    
                          ENDP

                  |L9.44|
00002c  41542b52          DCB      "AT+RETPASS=OK\r\n",0
000030  45545041
000034  53533d4f
000038  4b0d0a00

                          AREA ||i.process_at_setidkey||, CODE, READONLY, ALIGN=2

                  process_at_setidkey PROC
;;;155    }
;;;156    static int process_at_setidkey(int argc, char **argv) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;157    	char*retBuffer = NULL;
000008  f04f0a00          MOV      r10,#0
;;;158    	int length = 0;
00000c  2700              MOVS     r7,#0
;;;159    	int i = 0;
00000e  46b8              MOV      r8,r7
;;;160    	unsigned char temppid,tempkey;
;;;161    	if (argc == 3) {
000010  f1b90f03          CMP      r9,#3
000014  d160              BNE      |L10.216|
;;;162    		if (strlen(argv[1]) == 32 && strlen(argv[2]) >= 32) {
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       strlen
00001c  2820              CMP      r0,#0x20
00001e  d15b              BNE      |L10.216|
000020  68a0              LDR      r0,[r4,#8]
000022  f7fffffe          BL       strlen
000026  2820              CMP      r0,#0x20
000028  d356              BCC      |L10.216|
;;;163    			argv[1][32] = '\0';
00002a  2000              MOVS     r0,#0
00002c  6861              LDR      r1,[r4,#4]
00002e  f8810020          STRB     r0,[r1,#0x20]
;;;164    			argv[2][32] = '\0';
000032  68a1              LDR      r1,[r4,#8]
000034  f8810020          STRB     r0,[r1,#0x20]
;;;165    			for (i = 0; i < 32; i++) {
000038  bf00              NOP      
00003a  e030              B        |L10.158|
                  |L10.60|
;;;166    				temppid = argv[1][i];
00003c  6860              LDR      r0,[r4,#4]
00003e  f8105008          LDRB     r5,[r0,r8]
;;;167    				tempkey = argv[2][i];
000042  68a0              LDR      r0,[r4,#8]
000044  f8106008          LDRB     r6,[r0,r8]
;;;168    				
;;;169    			if (temppid <= '9' && temppid >= '0') {
000048  2d39              CMP      r5,#0x39
00004a  dc01              BGT      |L10.80|
00004c  2d30              CMP      r5,#0x30
00004e  da10              BGE      |L10.114|
                  |L10.80|
;;;170    			} else if (temppid > 'f' || temppid < 'a') {
000050  2d66              CMP      r5,#0x66
000052  dc01              BGT      |L10.88|
000054  2d61              CMP      r5,#0x61
000056  da0c              BGE      |L10.114|
                  |L10.88|
;;;171    				retBuffer = "AT+RETIDKEY=ERROR\r\n";
000058  f20f0a94          ADR      r10,|L10.240|
;;;172    				length = strlen(retBuffer);
00005c  4650              MOV      r0,r10
00005e  f7fffffe          BL       strlen
000062  4607              MOV      r7,r0
;;;173    				XlinkUartSend((unsigned char *) retBuffer, length);
000064  b2b9              UXTH     r1,r7
000066  4650              MOV      r0,r10
000068  f7fffffe          BL       XlinkUartSend
;;;174    				return __X_AT_OK__;
00006c  2005              MOVS     r0,#5
                  |L10.110|
;;;175    			}		
;;;176    			if (tempkey <= '9' && tempkey >= '0') {
;;;177    			} else if (tempkey > 'f' || tempkey < 'a') {
;;;178    				retBuffer = "AT+RETIDKEY=ERROR\r\n";
;;;179    				length = strlen(retBuffer);
;;;180    				XlinkUartSend((unsigned char *) retBuffer, length);
;;;181    				return __X_AT_OK__;
;;;182    			}
;;;183    		
;;;184    //				if (temppid <= '9' && temppid >= '0' && tempkey <= '9' && tempkey >= '0') {
;;;185    //				} else if ((temppid >= 'a' || temppid <= 'f' )&& (tempkey >= 'a' || tempkey <= 'f')) {
;;;186    //						retBuffer = "AT+RETIDKEY=ERROR\r\n";
;;;187    //						length = strlen(retBuffer);
;;;188    //						XlinkUartSend((unsigned char *) retBuffer, length);
;;;189    //					return __X_AT_OK__;
;;;190    //				}
;;;191    			}
;;;192    			XlinkWriteProductIDKEY(argv[1], argv[2]);
;;;193    			xlink_msleep(5);
;;;194    			retBuffer = "AT+RETIDKEY=OK\r\n";
;;;195    			length = strlen(retBuffer);
;;;196    			XlinkUartSend((unsigned char *) retBuffer, length);
;;;197    			xlink_msleep(50);
;;;198    			process_at_reboot(0, NULL );
;;;199    			return __X_AT_OK__;
;;;200    		}
;;;201    
;;;202    	}
;;;203    	retBuffer = "AT+RETIDKEY=ERROR\r\n";
;;;204    	length = strlen(retBuffer);
;;;205    	XlinkUartSend((unsigned char *) retBuffer, length);
;;;206    	return __X_AT_OK__;
;;;207    }
00006e  e8bd87f0          POP      {r4-r10,pc}
                  |L10.114|
000072  2e39              CMP      r6,#0x39              ;176
000074  dc01              BGT      |L10.122|
000076  2e30              CMP      r6,#0x30              ;176
000078  da0f              BGE      |L10.154|
                  |L10.122|
00007a  2e66              CMP      r6,#0x66              ;177
00007c  dc01              BGT      |L10.130|
00007e  2e61              CMP      r6,#0x61              ;177
000080  da0b              BGE      |L10.154|
                  |L10.130|
000082  f20f0a6c          ADR      r10,|L10.240|
000086  4650              MOV      r0,r10                ;179
000088  f7fffffe          BL       strlen
00008c  4607              MOV      r7,r0                 ;179
00008e  b2b9              UXTH     r1,r7                 ;180
000090  4650              MOV      r0,r10                ;180
000092  f7fffffe          BL       XlinkUartSend
000096  2005              MOVS     r0,#5                 ;181
000098  e7e9              B        |L10.110|
                  |L10.154|
00009a  f1080801          ADD      r8,r8,#1              ;165
                  |L10.158|
00009e  f1b80f20          CMP      r8,#0x20              ;165
0000a2  dbcb              BLT      |L10.60|
0000a4  e9d40101          LDRD     r0,r1,[r4,#4]         ;192
0000a8  f7fffffe          BL       XlinkWriteProductIDKEY
0000ac  2005              MOVS     r0,#5                 ;193
0000ae  f7fffffe          BL       hf_thread_delay
0000b2  f20f0a50          ADR      r10,|L10.260|
0000b6  4650              MOV      r0,r10                ;195
0000b8  f7fffffe          BL       strlen
0000bc  4607              MOV      r7,r0                 ;195
0000be  b2b9              UXTH     r1,r7                 ;196
0000c0  4650              MOV      r0,r10                ;196
0000c2  f7fffffe          BL       XlinkUartSend
0000c6  2032              MOVS     r0,#0x32              ;197
0000c8  f7fffffe          BL       hf_thread_delay
0000cc  2100              MOVS     r1,#0                 ;198
0000ce  4608              MOV      r0,r1                 ;198
0000d0  f7fffffe          BL       process_at_reboot
0000d4  2005              MOVS     r0,#5                 ;199
0000d6  e7ca              B        |L10.110|
                  |L10.216|
0000d8  f20f0a14          ADR      r10,|L10.240|
0000dc  4650              MOV      r0,r10                ;204
0000de  f7fffffe          BL       strlen
0000e2  4607              MOV      r7,r0                 ;204
0000e4  b2b9              UXTH     r1,r7                 ;205
0000e6  4650              MOV      r0,r10                ;205
0000e8  f7fffffe          BL       XlinkUartSend
0000ec  2005              MOVS     r0,#5                 ;206
0000ee  e7be              B        |L10.110|
;;;208    
                          ENDP

                  |L10.240|
0000f0  41542b52          DCB      "AT+RETIDKEY=ERROR\r\n",0
0000f4  45544944
0000f8  4b45593d
0000fc  4552524f
000100  520d0a00
                  |L10.260|
000104  41542b52          DCB      "AT+RETIDKEY=OK\r\n",0
000108  45544944
00010c  4b45593d
000110  4f4b0d0a
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.process_at_smart||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  process_at_smart PROC
;;;312    
;;;313    static int process_at_smart(int argc, char **argv) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b086              SUB      sp,sp,#0x18
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
;;;314    	char buf[20];
;;;315    	char *cmdS = "AT+SMTLK\r\n";
00000a  a512              ADR      r5,|L11.84|
;;;316    	char *retcmds = "AT+RETSMART=OK\r\n";
00000c  a414              ADR      r4,|L11.96|
;;;317    	memset(buf, 0, 20);
00000e  2114              MOVS     r1,#0x14
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       __aeabi_memclr4
;;;318    	sprintf(buf, "%s", retcmds);
000016  4622              MOV      r2,r4
000018  a116              ADR      r1,|L11.116|
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       __2sprintf
;;;319    	XlinkUartSend((unsigned char*) buf, strlen(retcmds));
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       strlen
000026  b286              UXTH     r6,r0
000028  4631              MOV      r1,r6
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       XlinkUartSend
;;;320    	msleep(20);
000030  2014              MOVS     r0,#0x14
000032  f7fffffe          BL       hf_thread_delay
;;;321    	hfat_send_cmd(cmdS, xlink_strlen(cmdS), buf, 20);
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       strlen
00003c  4606              MOV      r6,r0
00003e  2314              MOVS     r3,#0x14
000040  aa01              ADD      r2,sp,#4
000042  4631              MOV      r1,r6
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       hfat_send_cmd
;;;322    	return __X_AT_OK__;
00004a  2005              MOVS     r0,#5
;;;323    }
00004c  b006              ADD      sp,sp,#0x18
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;324    
                          ENDP

000052  0000              DCW      0x0000
                  |L11.84|
000054  41542b53          DCB      "AT+SMTLK\r\n",0
000058  4d544c4b
00005c  0d0a00  
00005f  00                DCB      0
                  |L11.96|
000060  41542b52          DCB      "AT+RETSMART=OK\r\n",0
000064  4554534d
000068  4152543d
00006c  4f4b0d0a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L11.116|
000074  257300            DCB      "%s",0
000077  00                DCB      0

                          AREA ||i.process_at_ver||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  process_at_ver PROC
;;;208    
;;;209    static int process_at_ver(int argc, char **argv) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b0b5              SUB      sp,sp,#0xd4
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;210    	unsigned char buf[200];
;;;211    	char *temp = NULL;
000008  2400              MOVS     r4,#0
;;;212    	memset(buf, 0, 200);
00000a  21c8              MOVS     r1,#0xc8
00000c  a803              ADD      r0,sp,#0xc
00000e  f7fffffe          BL       __aeabi_memclr4
;;;213    	temp = XlinkSystemVersion();
000012  f7fffffe          BL       XlinkSystemVersion
000016  4604              MOV      r4,r0
;;;214    	if (temp) {
000018  2c00              CMP      r4,#0
00001a  d014              BEQ      |L12.70|
;;;215    		sprintf((char*) buf, "AT+RETVER=at ver=1.%d  App %d build %s %s %s \r\n", AT_VERSION,user_config.wifisoftVersion , __DATE__,__TIME__,temp);
00001c  a012              ADR      r0,|L12.104|
00001e  a115              ADR      r1,|L12.116|
000020  e9cd0401          STRD     r0,r4,[sp,#4]
000024  9100              STR      r1,[sp,#0]
000026  4816              LDR      r0,|L12.128|
000028  8cc3              LDRH     r3,[r0,#0x26]  ; user_config
00002a  2202              MOVS     r2,#2
00002c  a115              ADR      r1,|L12.132|
00002e  a803              ADD      r0,sp,#0xc
000030  f7fffffe          BL       __2sprintf
;;;216    		XlinkUartSend(buf, strlen((char*) buf));
000034  a803              ADD      r0,sp,#0xc
000036  f7fffffe          BL       strlen
00003a  b285              UXTH     r5,r0
00003c  4629              MOV      r1,r5
00003e  a803              ADD      r0,sp,#0xc
000040  f7fffffe          BL       XlinkUartSend
000044  e00c              B        |L12.96|
                  |L12.70|
;;;217    	} else {
;;;218    		memcpy(buf, "AT+RETVER=get version failed\r\n", strlen("AT+RETVER=get version failed\r\n"));
000046  221e              MOVS     r2,#0x1e
000048  a11a              ADR      r1,|L12.180|
00004a  a803              ADD      r0,sp,#0xc
00004c  f7fffffe          BL       __aeabi_memcpy4
;;;219    		XlinkUartSend(buf, strlen((char*) buf));
000050  a803              ADD      r0,sp,#0xc
000052  f7fffffe          BL       strlen
000056  b285              UXTH     r5,r0
000058  4629              MOV      r1,r5
00005a  a803              ADD      r0,sp,#0xc
00005c  f7fffffe          BL       XlinkUartSend
                  |L12.96|
;;;220    	}
;;;221    	return __X_AT_OK__;
000060  2005              MOVS     r0,#5
;;;222    }
000062  b035              ADD      sp,sp,#0xd4
000064  bdf0              POP      {r4-r7,pc}
;;;223    
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
000068  31363a33          DCB      "16:34:05",0
00006c  343a3035
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L12.116|
000074  41756720          DCB      "Aug  8 2016",0
000078  20382032
00007c  30313600
                  |L12.128|
                          DCD      user_config
                  |L12.132|
000084  41542b52          DCB      "AT+RETVER=at ver=1.%d  App %d build %s %s %s \r\n",0
000088  45545645
00008c  523d6174
000090  20766572
000094  3d312e25
000098  64202041
00009c  70702025
0000a0  64206275
0000a4  696c6420
0000a8  25732025
0000ac  73202573
0000b0  200d0a00
                  |L12.180|
0000b4  41542b52          DCB      "AT+RETVER=get version failed\r\n",0
0000b8  45545645
0000bc  523d6765
0000c0  74207665
0000c4  7273696f
0000c8  6e206661
0000cc  696c6564
0000d0  0d0a00  
0000d3  00                DCB      0

                          AREA ||i.xlink_process_at_cmd||, CODE, READONLY, ALIGN=2

                  xlink_process_at_cmd PROC
;;;67     
;;;68     int xlink_process_at_cmd(unsigned char *data, unsigned int datalen) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b0af              SUB      sp,sp,#0xbc
000006  4681              MOV      r9,r0
000008  4688              MOV      r8,r1
;;;69     	int ret = 0;
00000a  f04f0a00          MOV      r10,#0
;;;70     	unsigned int cmd_length = 0;
00000e  2600              MOVS     r6,#0
;;;71     	int index = 0;
000010  2500              MOVS     r5,#0
;;;72     	int argc = 0;
000012  2400              MOVS     r4,#0
;;;73     	char *chr = NULL, *strPtr = NULL;
000014  46a3              MOV      r11,r4
000016  2700              MOVS     r7,#0
;;;74     	char argv[__X_CMD_PARAM_COUNT_ ][__X_CMD_SIZE_ ];
;;;75     	char *argvPtr[__X_CMD_PARAM_COUNT_ ];
;;;76     	for (; xlink_at_table[index].name != NULL ; index++) {
000018  e0ab              B        |L13.370|
                  |L13.26|
;;;77     		cmd_length = strlen(xlink_at_table[index].name);
00001a  eb050145          ADD      r1,r5,r5,LSL #1
00001e  4a5b              LDR      r2,|L13.396|
000020  f8520021          LDR      r0,[r2,r1,LSL #2]
000024  f7fffffe          BL       strlen
000028  4606              MOV      r6,r0
;;;78     		if (cmd_length <= datalen) {
00002a  4546              CMP      r6,r8
00002c  d87e              BHI      |L13.300|
;;;79     			if (strncmp((char*) data, xlink_at_table[index].name, cmd_length) == 0) {
00002e  eb050045          ADD      r0,r5,r5,LSL #1
000032  4a56              LDR      r2,|L13.396|
000034  f8521020          LDR      r1,[r2,r0,LSL #2]
000038  4632              MOV      r2,r6
00003a  4648              MOV      r0,r9
00003c  f7fffffe          BL       strncmp
000040  2800              CMP      r0,#0
000042  d173              BNE      |L13.300|
;;;80     				argc = 0;
000044  2400              MOVS     r4,#0
;;;81     				if (xlink_at_table[index].func) {
000046  eb050045          ADD      r0,r5,r5,LSL #1
00004a  4950              LDR      r1,|L13.396|
00004c  eb010080          ADD      r0,r1,r0,LSL #2
000050  6840              LDR      r0,[r0,#4]
000052  2800              CMP      r0,#0
000054  d06b              BEQ      |L13.302|
;;;82     					memset(argv[argc], 0, __X_CMD_SIZE_);
000056  eb041144          ADD      r1,r4,r4,LSL #5
00005a  aa05              ADD      r2,sp,#0x14
00005c  1888              ADDS     r0,r1,r2
00005e  2121              MOVS     r1,#0x21
000060  f7fffffe          BL       __aeabi_memclr
;;;83     					memcpy(argv[argc], xlink_at_table[index].name, cmd_length);
000064  eb050245          ADD      r2,r5,r5,LSL #1
000068  4b48              LDR      r3,|L13.396|
00006a  f8531022          LDR      r1,[r3,r2,LSL #2]
00006e  eb041244          ADD      r2,r4,r4,LSL #5
000072  ab05              ADD      r3,sp,#0x14
000074  18d0              ADDS     r0,r2,r3
000076  4632              MOV      r2,r6
000078  f7fffffe          BL       __aeabi_memcpy
;;;84     					argvPtr[argc] = argv[argc];
00007c  eb041044          ADD      r0,r4,r4,LSL #5
000080  a905              ADD      r1,sp,#0x14
000082  4408              ADD      r0,r0,r1
000084  f84d0024          STR      r0,[sp,r4,LSL #2]
;;;85     					argc++;
000088  1c64              ADDS     r4,r4,#1
;;;86     					if ((chr = strchr((char*) data, '=')) != NULL ) {
00008a  213d              MOVS     r1,#0x3d
00008c  4648              MOV      r0,r9
00008e  f7fffffe          BL       strchr
000092  ea5f0b00          MOVS     r11,r0
000096  d055              BEQ      |L13.324|
;;;87     						strPtr = strtok(chr + 1, ",");
000098  a13d              ADR      r1,|L13.400|
00009a  f10b0001          ADD      r0,r11,#1
00009e  f7fffffe          BL       strtok
0000a2  4607              MOV      r7,r0
;;;88     						if (strPtr) {
0000a4  2f00              CMP      r7,#0
0000a6  d04d              BEQ      |L13.324|
;;;89     							cmd_length = strlen(strPtr);
0000a8  4638              MOV      r0,r7
0000aa  f7fffffe          BL       strlen
0000ae  4606              MOV      r6,r0
;;;90     							cmd_length = (cmd_length >= __X_CMD_SIZE_) ? __X_CMD_SIZE_ : cmd_length;
0000b0  2e21              CMP      r6,#0x21
0000b2  d301              BCC      |L13.184|
0000b4  2021              MOVS     r0,#0x21
0000b6  e000              B        |L13.186|
                  |L13.184|
0000b8  4630              MOV      r0,r6
                  |L13.186|
0000ba  4606              MOV      r6,r0
;;;91     							memset(argv[argc], 0, __X_CMD_SIZE_);
0000bc  eb041144          ADD      r1,r4,r4,LSL #5
0000c0  aa05              ADD      r2,sp,#0x14
0000c2  1888              ADDS     r0,r1,r2
0000c4  2121              MOVS     r1,#0x21
0000c6  f7fffffe          BL       __aeabi_memclr
;;;92     							memcpy(argv[argc], strPtr, cmd_length);
0000ca  eb041144          ADD      r1,r4,r4,LSL #5
0000ce  aa05              ADD      r2,sp,#0x14
0000d0  1888              ADDS     r0,r1,r2
0000d2  4632              MOV      r2,r6
0000d4  4639              MOV      r1,r7
0000d6  f7fffffe          BL       __aeabi_memcpy
;;;93     							argvPtr[argc] = argv[argc];
0000da  eb041044          ADD      r0,r4,r4,LSL #5
0000de  a905              ADD      r1,sp,#0x14
0000e0  4408              ADD      r0,r0,r1
0000e2  f84d0024          STR      r0,[sp,r4,LSL #2]
;;;94     							argc++;
0000e6  1c64              ADDS     r4,r4,#1
;;;95     
;;;96     							while ((strPtr = strtok(NULL, ",")) != NULL ) {
0000e8  e025              B        |L13.310|
                  |L13.234|
;;;97     								cmd_length = strlen(strPtr);
0000ea  4638              MOV      r0,r7
0000ec  f7fffffe          BL       strlen
0000f0  4606              MOV      r6,r0
;;;98     								cmd_length = (cmd_length >= __X_CMD_SIZE_) ? __X_CMD_SIZE_ : cmd_length;
0000f2  2e21              CMP      r6,#0x21
0000f4  d301              BCC      |L13.250|
0000f6  2021              MOVS     r0,#0x21
0000f8  e000              B        |L13.252|
                  |L13.250|
0000fa  4630              MOV      r0,r6
                  |L13.252|
0000fc  4606              MOV      r6,r0
;;;99     								memset(argv[argc], 0, __X_CMD_SIZE_);
0000fe  eb041144          ADD      r1,r4,r4,LSL #5
000102  aa05              ADD      r2,sp,#0x14
000104  1888              ADDS     r0,r1,r2
000106  2121              MOVS     r1,#0x21
000108  f7fffffe          BL       __aeabi_memclr
;;;100    								memcpy(argv[argc], strPtr, cmd_length);
00010c  eb041144          ADD      r1,r4,r4,LSL #5
000110  aa05              ADD      r2,sp,#0x14
000112  1888              ADDS     r0,r1,r2
000114  4632              MOV      r2,r6
000116  4639              MOV      r1,r7
000118  f7fffffe          BL       __aeabi_memcpy
;;;101    								argvPtr[argc] = argv[argc];
00011c  eb041044          ADD      r0,r4,r4,LSL #5
000120  a905              ADD      r1,sp,#0x14
000122  4408              ADD      r0,r0,r1
000124  f84d0024          STR      r0,[sp,r4,LSL #2]
;;;102    								argc++;
000128  1c64              ADDS     r4,r4,#1
;;;103    								if (argc == 5)
00012a  e001              B        |L13.304|
                  |L13.300|
00012c  e020              B        |L13.368|
                  |L13.302|
00012e  e013              B        |L13.344|
                  |L13.304|
000130  2c05              CMP      r4,#5
000132  d100              BNE      |L13.310|
;;;104    									break;
000134  e005              B        |L13.322|
                  |L13.310|
000136  a116              ADR      r1,|L13.400|
000138  2000              MOVS     r0,#0                 ;96
00013a  f7fffffe          BL       strtok
00013e  0007              MOVS     r7,r0                 ;96
000140  d1d3              BNE      |L13.234|
                  |L13.322|
000142  bf00              NOP      
                  |L13.324|
;;;105    							}
;;;106    						}
;;;107    					}
;;;108    					ret = xlink_at_table[index].func(argc, argvPtr);
000144  eb050045          ADD      r0,r5,r5,LSL #1
000148  4910              LDR      r1,|L13.396|
00014a  eb010080          ADD      r0,r1,r0,LSL #2
00014e  4669              MOV      r1,sp
000150  6842              LDR      r2,[r0,#4]
000152  4620              MOV      r0,r4
000154  4790              BLX      r2
000156  4682              MOV      r10,r0
                  |L13.344|
;;;109    				}
;;;110    				u_printf("\r\n---find cmd %s \r\n", xlink_at_table[index].name);
000158  eb050045          ADD      r0,r5,r5,LSL #1
00015c  490b              LDR      r1,|L13.396|
00015e  f8512020          LDR      r2,[r1,r0,LSL #2]
000162  a10c              ADR      r1,|L13.404|
000164  200a              MOVS     r0,#0xa
000166  f7fffffe          BL       HF_Debug
;;;111    				ret = __X_AT_OK__;
00016a  f04f0a05          MOV      r10,#5
;;;112    				break;
00016e  e008              B        |L13.386|
                  |L13.368|
000170  1c6d              ADDS     r5,r5,#1              ;76
                  |L13.370|
000172  eb050045          ADD      r0,r5,r5,LSL #1       ;76
000176  4905              LDR      r1,|L13.396|
000178  f8510020          LDR      r0,[r1,r0,LSL #2]     ;76
00017c  2800              CMP      r0,#0                 ;76
00017e  f47faf4c          BNE      |L13.26|
                  |L13.386|
000182  bf00              NOP      
;;;113    			}
;;;114    		}
;;;115    	}
;;;116    
;;;117    	return ret;
000184  4650              MOV      r0,r10
;;;118    }
000186  b02f              ADD      sp,sp,#0xbc
000188  e8bd8ff0          POP      {r4-r11,pc}
;;;119    
                          ENDP

                  |L13.396|
                          DCD      xlink_at_table
                  |L13.400|
000190  2c00              DCB      ",",0
000192  00                DCB      0
000193  00                DCB      0
                  |L13.404|
000194  0d0a2d2d          DCB      "\r\n---find cmd %s \r\n",0
000198  2d66696e
00019c  6420636d
0001a0  64202573
0001a4  200d0a00

                          AREA ||i.xlink_process_at_scan_enable||, CODE, READONLY, ALIGN=2

                  xlink_process_at_scan_enable PROC
;;;47     		};
;;;48     static int xlink_process_at_scan_enable(int argc, char **argv)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;49     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;50     	char *retBuf = NULL;
000008  2600              MOVS     r6,#0
;;;51     	int len = 0;
00000a  2700              MOVS     r7,#0
;;;52     	if (argc == 2) {
00000c  2d02              CMP      r5,#2
00000e  d113              BNE      |L14.56|
;;;53     		if (strncmp(argv[1], "ON", 2) == 0) {			
000010  2202              MOVS     r2,#2
000012  a10f              ADR      r1,|L14.80|
000014  6860              LDR      r0,[r4,#4]
000016  f7fffffe          BL       strncmp
00001a  b918              CBNZ     r0,|L14.36|
;;;54     			XlinkPorcess_UDP_Enable();
00001c  f7fffffe          BL       XlinkPorcess_UDP_Enable
;;;55     			retBuf = "AT+SCAN=OK\r\n";
000020  a60c              ADR      r6,|L14.84|
000022  e00a              B        |L14.58|
                  |L14.36|
;;;56     		} else if (strncmp(argv[1], "OFF", 3) == 0) {
000024  2203              MOVS     r2,#3
000026  a10f              ADR      r1,|L14.100|
000028  6860              LDR      r0,[r4,#4]
00002a  f7fffffe          BL       strncmp
00002e  b920              CBNZ     r0,|L14.58|
;;;57     			XlinkPorcess_UDP_Disable();
000030  f7fffffe          BL       XlinkPorcess_UDP_Disable
;;;58     			retBuf = "AT+SCAN=OK\r\n";
000034  a607              ADR      r6,|L14.84|
000036  e000              B        |L14.58|
                  |L14.56|
;;;59     		}
;;;60     	} else {
;;;61     		retBuf = "AT+SCAN=ERROR\r\n";
000038  a60b              ADR      r6,|L14.104|
                  |L14.58|
;;;62     	}
;;;63     	len = xlink_strlen(retBuf);
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       strlen
000040  4607              MOV      r7,r0
;;;64     	XlinkUartSend((unsigned char *) retBuf, len);
000042  b2b9              UXTH     r1,r7
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       XlinkUartSend
;;;65     	return __X_AT_OK__;
00004a  2005              MOVS     r0,#5
;;;66     }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;67     
                          ENDP

                  |L14.80|
000050  4f4e00            DCB      "ON",0
000053  00                DCB      0
                  |L14.84|
000054  41542b53          DCB      "AT+SCAN=OK\r\n",0
000058  43414e3d
00005c  4f4b0d0a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L14.100|
000064  4f464600          DCB      "OFF",0
                  |L14.104|
000068  41542b53          DCB      "AT+SCAN=ERROR\r\n",0
00006c  43414e3d
000070  4552524f
000074  520d0a00

                          AREA ||i.xlink_send_uart_sta||, CODE, READONLY, ALIGN=1

                  xlink_send_uart_sta PROC
;;;128    
;;;129    int xlink_send_uart_sta(void) {
000000  b510              PUSH     {r4,lr}
;;;130    	process_at_getStatus(NULL, 0);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       process_at_getStatus
;;;131    	return 0;
00000a  2000              MOVS     r0,#0
;;;132    }
00000c  bd10              POP      {r4,pc}
;;;133    
                          ENDP


                          AREA ||i.xlink_start_smart||, CODE, READONLY, ALIGN=1

                  xlink_start_smart PROC
;;;133    
;;;134    int xlink_start_smart(void) {
000000  b510              PUSH     {r4,lr}
;;;135    	process_at_smart(NULL, 0);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       process_at_smart
;;;136    	return 0;
00000a  2000              MOVS     r0,#0
;;;137    }
00000c  bd10              POP      {r4,pc}
;;;138    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  xlink_at_table
                          DCD      ||.conststring||
                          DCD      process_at_help
                          DCD      ||.conststring||+0x5
                          DCD      ||.conststring||+0x29
                          DCD      process_at_getmac
                          DCD      ||.conststring||+0x34
                          DCD      ||.conststring||+0x58
                          DCD      process_at_ver
                          DCD      ||.conststring||+0x63
                          DCD      ||.conststring||+0x88
                          DCD      process_at_getStatus
                          DCD      ||.conststring||+0x93
                          DCD      ||.conststring||+0xdb
                          DCD      process_at_getid
                          DCD      ||.conststring||+0xe5
                          DCD      ||.conststring||+0x10c
                          DCD      process_at_reboot
                          DCD      ||.conststring||+0x117
                          DCD      ||.conststring||+0x135
                          DCD      process_at_repass
                          DCD      ||.conststring||+0x140
                          DCD      ||.conststring||+0x16a
                          DCD      process_at_smart
                          DCD      ||.conststring||+0x174
                          DCD      ||.conststring||+0x191
                          DCD      process_at_getTime
                          DCD      ||.conststring||+0x19d
                          DCD      ||.conststring||+0x1bd
                          DCD      process_at_debug
                          DCD      ||.conststring||+0x1c7
                          DCD      ||.conststring||+0x1d9
                          DCD      process_at_setidkey
                          DCD      ||.conststring||+0x1e6
                          DCD      ||.conststring||+0x20b
                          DCD      xlink_process_at_scan_enable
                          DCD      ||.conststring||+0x214
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  41542b48          DCB      "AT+H",0
000004  00      
000005  41542b48          DCB      "AT+H get xlink at cmd information\r\n",0
000009  20676574
00000d  20786c69
000011  6e6b2061
000015  7420636d
000019  6420696e
00001d  666f726d
000021  6174696f
000025  6e0d0a00
000029  41542b47          DCB      "AT+GETMAC#",0
00002d  45544d41
000031  432300  
000034  41542b47          DCB      "AT+GETMAC#    get device mac addr\r\n",0
000038  45544d41
00003c  43232020
000040  20206765
000044  74206465
000048  76696365
00004c  206d6163
000050  20616464
000054  720d0a00
000058  41542b47          DCB      "AT+GETVER#",0
00005c  45545645
000060  522300  
000063  41542b47          DCB      "AT+GETVER#    get xlink at version\r\n",0
000067  45545645
00006b  52232020
00006f  20206765
000073  7420786c
000077  696e6b20
00007b  61742076
00007f  65727369
000083  6f6e0d0a
000087  00      
000088  41542b47          DCB      "AT+GETSTA#",0
00008c  45545354
000090  412300  
000093  41542b47          DCB      "AT+GETSTATUS# get current system status (wifi sta,conne"
000097  45545354
00009b  41545553
00009f  23206765
0000a3  74206375
0000a7  7272656e
0000ab  74207379
0000af  7374656d
0000b3  20737461
0000b7  74757320
0000bb  28776966
0000bf  69207374
0000c3  612c636f
0000c7  6e6e65  
0000ca  63742073          DCB      "ct server sta)\r\n",0
0000ce  65727665
0000d2  72207374
0000d6  61290d0a
0000da  00      
0000db  41542b47          DCB      "AT+GETID#",0
0000df  45544944
0000e3  2300    
0000e5  41542b47          DCB      "AT+GETID#     get current product id\r\n",0
0000e9  45544944
0000ed  23202020
0000f1  20206765
0000f5  74206375
0000f9  7272656e
0000fd  74207072
000101  6f647563
000105  74206964
000109  0d0a00  
00010c  41542b52          DCB      "AT+REBOOT#",0
000110  45424f4f
000114  542300  
000117  41542b52          DCB      "AT+REBOOT#    reboot system\r\n",0
00011b  45424f4f
00011f  54232020
000123  20207265
000127  626f6f74
00012b  20737973
00012f  74656d0d
000133  0a00    
000135  41542b52          DCB      "AT+REPASS#",0
000139  45504153
00013d  532300  
000140  41542b52          DCB      "AT+REPASS#  retSet system password 8888\r\n",0
000144  45504153
000148  53232020
00014c  72657453
000150  65742073
000154  79737465
000158  6d207061
00015c  7373776f
000160  72642038
000164  3838380d
000168  0a00    
00016a  41542b53          DCB      "AT+SMART#",0
00016e  4d415254
000172  2300    
000174  41542b53          DCB      "AT+SMART#  start smartlink\r\n",0
000178  4d415254
00017c  23202073
000180  74617274
000184  20736d61
000188  72746c69
00018c  6e6b0d0a
000190  00      
000191  41542b47          DCB      "AT+GETTIME#",0
000195  45545449
000199  4d452300
00019d  41542b47          DCB      "AT+GETTIME#  get current time\r\n",0
0001a1  45545449
0001a5  4d452320
0001a9  20676574
0001ad  20637572
0001b1  72656e74
0001b5  2074696d
0001b9  650d0a00
0001bd  41542b44          DCB      "AT+DEBUG=",0
0001c1  45425547
0001c5  3d00    
0001c7  41542b44          DCB      "AT+DEBUG=ON|OFF\r\n",0
0001cb  45425547
0001cf  3d4f4e7c
0001d3  4f46460d
0001d7  0a00    
0001d9  41542b53          DCB      "AT+SETIDKEY=",0
0001dd  45544944
0001e1  4b45593d
0001e5  00      
0001e6  41542b53          DCB      "AT+SETIDKEY=product id,product key\r\n",0
0001ea  45544944
0001ee  4b45593d
0001f2  70726f64
0001f6  75637420
0001fa  69642c70
0001fe  726f6475
000202  6374206b
000206  65790d0a
00020a  00      
00020b  41542b53          DCB      "AT+SCAN=",0
00020f  43414e3d
000213  00      
000214  41542b53          DCB      "AT+SCAN=ON|OFF\r\n",0
000218  43414e3d
00021c  4f4e7c4f
000220  46460d0a
000224  00      
